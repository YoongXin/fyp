-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Parser.SkelCoLa where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Parser.AbsCoLa

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Parser.AbsCoLa.Ident -> Result
transIdent x = case x of
  Parser.AbsCoLa.Ident string -> failure x

transContract :: Parser.AbsCoLa.Contract -> Result
transContract x = case x of
  Parser.AbsCoLa.ConEmpty -> failure x
  Parser.AbsCoLa.ConComp component -> failure x
  Parser.AbsCoLa.ConAnd component contract -> failure x

transComponent :: Parser.AbsCoLa.Component -> Result
transComponent x = case x of
  Parser.AbsCoLa.ComDef definition -> failure x
  Parser.AbsCoLa.ComConDef conditionaldefinition -> failure x
  Parser.AbsCoLa.ComState statement -> failure x
  Parser.AbsCoLa.ComConState conditionalstatement -> failure x

transDefinition :: Parser.AbsCoLa.Definition -> Result
transDefinition x = case x of
  Parser.AbsCoLa.DefSim simpledefinition -> failure x
  Parser.AbsCoLa.DefAnd simpledefinition definition -> failure x

transSimpleDefinition :: Parser.AbsCoLa.SimpleDefinition -> Result
transSimpleDefinition x = case x of
  Parser.AbsCoLa.SimDefIs id subject1 subject2 -> failure x
  Parser.AbsCoLa.SimDefEq id subject numericalexpression -> failure x
  Parser.AbsCoLa.SimDefDate id subject num1 month num2 -> failure x

transNumericalExpression :: Parser.AbsCoLa.NumericalExpression -> Result
transNumericalExpression x = case x of
  Parser.AbsCoLa.NumExpNum num -> failure x
  Parser.AbsCoLa.NumExpObj numericalobject -> failure x
  Parser.AbsCoLa.NumExpOp numericalexpression1 operator numericalexpression2 -> failure x

transOperator :: Parser.AbsCoLa.Operator -> Result
transOperator x = case x of
  Parser.AbsCoLa.OpPlus -> failure x
  Parser.AbsCoLa.OpMin -> failure x
  Parser.AbsCoLa.OpMult -> failure x
  Parser.AbsCoLa.OpDiv -> failure x

transConditionalDefinition :: Parser.AbsCoLa.ConditionalDefinition -> Result
transConditionalDefinition x = case x of
  Parser.AbsCoLa.ConDefIf definition condition -> failure x
  Parser.AbsCoLa.ConDefIfThen condition definition -> failure x
  Parser.AbsCoLa.ConDefIfElse definition1 condition definition2 -> failure x
  Parser.AbsCoLa.ConDefIfThenElse condition definition1 definition2 -> failure x

transStatement :: Parser.AbsCoLa.Statement -> Result
transStatement x = case x of
  Parser.AbsCoLa.StateSim simplestatement -> failure x
  Parser.AbsCoLa.StateOr simplestatement statement -> failure x
  Parser.AbsCoLa.StateAnd simplestatement statement -> failure x

transConditionalStatement :: Parser.AbsCoLa.ConditionalStatement -> Result
transConditionalStatement x = case x of
  Parser.AbsCoLa.ConStateIf statement condition -> failure x
  Parser.AbsCoLa.ConStateIfThen condition statement -> failure x
  Parser.AbsCoLa.ConStateIfElse statement1 condition statement2 -> failure x
  Parser.AbsCoLa.ConStateIfThenElse condition statement1 statement2 -> failure x

transSimpleStatement :: Parser.AbsCoLa.SimpleStatement -> Result
transSimpleStatement x = case x of
  Parser.AbsCoLa.SimStateOne id holds subject modalverb verb object receiver date -> failure x
  Parser.AbsCoLa.SimStateTwo id holds subject date modalverb verb object receiver -> failure x
  Parser.AbsCoLa.SimStateThree id holds date subject modalverb verb object receiver -> failure x
  Parser.AbsCoLa.SimStateFour id holds subject verbstatus object receiver date -> failure x
  Parser.AbsCoLa.SimStateOneNH id subject modalverb verb object receiver date -> failure x
  Parser.AbsCoLa.SimStateTwoNH id subject date modalverb verb object receiver -> failure x
  Parser.AbsCoLa.SimStateThreeNH id date subject modalverb verb object receiver -> failure x
  Parser.AbsCoLa.SimStateFourNH id subject verbstatus object receiver date -> failure x

transCondition :: Parser.AbsCoLa.Condition -> Result
transCondition x = case x of
  Parser.AbsCoLa.CondiSim simplecondition -> failure x
  Parser.AbsCoLa.CondiOr simplecondition condition -> failure x
  Parser.AbsCoLa.CondiAnd simplecondition condition -> failure x

transSimpleCondition :: Parser.AbsCoLa.SimpleCondition -> Result
transSimpleCondition x = case x of
  Parser.AbsCoLa.SimConOne id holds subject verbstatus object receiver date -> failure x
  Parser.AbsCoLa.SimConTwo id holds subject date verbstatus object receiver -> failure x
  Parser.AbsCoLa.SimConThree id holds date subject verbstatus object receiver -> failure x
  Parser.AbsCoLa.SimConFour id holds subject modalverb verb object receiver date -> failure x
  Parser.AbsCoLa.SimConFive id holds booleanexpression -> failure x
  Parser.AbsCoLa.SimConOneNH id subject verbstatus object receiver date -> failure x
  Parser.AbsCoLa.SimConTwoNH id subject date verbstatus object receiver -> failure x
  Parser.AbsCoLa.SimConThreeNH id date subject verbstatus object receiver -> failure x
  Parser.AbsCoLa.SimConFourNH id subject modalverb verb object receiver date -> failure x
  Parser.AbsCoLa.SimConFiveNH id booleanexpression -> failure x

transBooleanExpression :: Parser.AbsCoLa.BooleanExpression -> Result
transBooleanExpression x = case x of
  Parser.AbsCoLa.BoolEx subject1 verbstatus comparison subject2 -> failure x

transID :: Parser.AbsCoLa.ID -> Result
transID x = case x of
  Parser.AbsCoLa.IDSim num -> failure x
  Parser.AbsCoLa.IDRep num1 num2 -> failure x

transHolds :: Parser.AbsCoLa.Holds -> Result
transHolds x = case x of
  Parser.AbsCoLa.HoldYes -> failure x
  Parser.AbsCoLa.HoldNo -> failure x

transSubject :: Parser.AbsCoLa.Subject -> Result
transSubject x = case x of
  Parser.AbsCoLa.SubQuoted string -> failure x
  Parser.AbsCoLa.SubUnQuoted ident -> failure x

transVerb :: Parser.AbsCoLa.Verb -> Result
transVerb x = case x of
  Parser.AbsCoLa.VDel -> failure x
  Parser.AbsCoLa.VPay -> failure x
  Parser.AbsCoLa.VCharge -> failure x
  Parser.AbsCoLa.VRefund -> failure x

transVerbStatus :: Parser.AbsCoLa.VerbStatus -> Result
transVerbStatus x = case x of
  Parser.AbsCoLa.VSDel -> failure x
  Parser.AbsCoLa.VSPay -> failure x
  Parser.AbsCoLa.VSCharge -> failure x
  Parser.AbsCoLa.VSRefund -> failure x

transComparison :: Parser.AbsCoLa.Comparison -> Result
transComparison x = case x of
  Parser.AbsCoLa.CompareLess -> failure x
  Parser.AbsCoLa.CompareEq equal -> failure x
  Parser.AbsCoLa.CompareMore more -> failure x

transEqual :: Parser.AbsCoLa.Equal -> Result
transEqual x = case x of
  Parser.AbsCoLa.EqOne -> failure x
  Parser.AbsCoLa.EqTwo -> failure x

transMore :: Parser.AbsCoLa.More -> Result
transMore x = case x of
  Parser.AbsCoLa.MoreOne -> failure x
  Parser.AbsCoLa.MoreTwo -> failure x

transModalVerb :: Parser.AbsCoLa.ModalVerb -> Result
transModalVerb x = case x of
  Parser.AbsCoLa.ModalObli obligation -> failure x
  Parser.AbsCoLa.ModalPermi -> failure x
  Parser.AbsCoLa.ModalForbi -> failure x

transObligation :: Parser.AbsCoLa.Obligation -> Result
transObligation x = case x of
  Parser.AbsCoLa.ObliOne -> failure x
  Parser.AbsCoLa.ObliTwo -> failure x

transDate :: Parser.AbsCoLa.Date -> Result
transDate x = case x of
  Parser.AbsCoLa.DateSpe specificdate -> failure x
  Parser.AbsCoLa.DateAny -> failure x
  Parser.AbsCoLa.DateSome subject -> failure x
  Parser.AbsCoLa.DateThe subject -> failure x
  Parser.AbsCoLa.DateQuanSpecific temporalquantifier num1 month num2 -> failure x
  Parser.AbsCoLa.DateQuanSome temporalquantifier subject -> failure x
  Parser.AbsCoLa.DateQuanThe temporalquantifier subject -> failure x
  Parser.AbsCoLa.DateQuanSomeWO temporaloffset temporalquantifier subject -> failure x
  Parser.AbsCoLa.DateQuanTheWO temporaloffset temporalquantifier subject -> failure x
  Parser.AbsCoLa.DateQuanTempSome temporalquantifier1 temporaloffset temporalquantifier2 subject -> failure x
  Parser.AbsCoLa.DateQuanTempThe temporalquantifier1 temporaloffset temporalquantifier2 subject -> failure x

transSpecificDate :: Parser.AbsCoLa.SpecificDate -> Result
transSpecificDate x = case x of
  Parser.AbsCoLa.DateSpeOnThe num1 month num2 -> failure x
  Parser.AbsCoLa.DateSpeOn num1 month num2 -> failure x

transTemporalQuantifier :: Parser.AbsCoLa.TemporalQuantifier -> Result
transTemporalQuantifier x = case x of
  Parser.AbsCoLa.TempAfter -> failure x
  Parser.AbsCoLa.TempBefore -> failure x

transTemporalOffset :: Parser.AbsCoLa.TemporalOffset -> Result
transTemporalOffset x = case x of
  Parser.AbsCoLa.TempOffDay num -> failure x
  Parser.AbsCoLa.TempOffYear num -> failure x
  Parser.AbsCoLa.TempOffWeek num -> failure x
  Parser.AbsCoLa.TempOffDays num -> failure x
  Parser.AbsCoLa.TempOffYears num -> failure x
  Parser.AbsCoLa.TempOffWeeks num -> failure x

transMonth :: Parser.AbsCoLa.Month -> Result
transMonth x = case x of
  Parser.AbsCoLa.MJan -> failure x
  Parser.AbsCoLa.MFeb -> failure x
  Parser.AbsCoLa.MMar -> failure x
  Parser.AbsCoLa.MApr -> failure x
  Parser.AbsCoLa.MMay -> failure x
  Parser.AbsCoLa.MJun -> failure x
  Parser.AbsCoLa.MJul -> failure x
  Parser.AbsCoLa.MAug -> failure x
  Parser.AbsCoLa.MSep -> failure x
  Parser.AbsCoLa.MOct -> failure x
  Parser.AbsCoLa.MNov -> failure x
  Parser.AbsCoLa.MDec -> failure x

transObject :: Parser.AbsCoLa.Object -> Result
transObject x = case x of
  Parser.AbsCoLa.ObjNu numericalobject -> failure x
  Parser.AbsCoLa.ObjNonNu nonnumericalobject -> failure x

transNumericalObject :: Parser.AbsCoLa.NumericalObject -> Result
transNumericalObject x = case x of
  Parser.AbsCoLa.NumPound pounds num -> failure x
  Parser.AbsCoLa.NumDol dollars num -> failure x
  Parser.AbsCoLa.NumEur euros num -> failure x
  Parser.AbsCoLa.NumAmount subject -> failure x

transPounds :: Parser.AbsCoLa.Pounds -> Result
transPounds x = case x of
  Parser.AbsCoLa.PoundOne -> failure x
  Parser.AbsCoLa.PoundTwo -> failure x
  Parser.AbsCoLa.PoundThree -> failure x

transDollars :: Parser.AbsCoLa.Dollars -> Result
transDollars x = case x of
  Parser.AbsCoLa.DollarOne -> failure x
  Parser.AbsCoLa.DollarTwo -> failure x
  Parser.AbsCoLa.DollarThree -> failure x

transEuros :: Parser.AbsCoLa.Euros -> Result
transEuros x = case x of
  Parser.AbsCoLa.EuroOne -> failure x
  Parser.AbsCoLa.EuroTwo -> failure x

transNonNumericalObject :: Parser.AbsCoLa.NonNumericalObject -> Result
transNonNumericalObject x = case x of
  Parser.AbsCoLa.NonNumCurr subject -> failure x
  Parser.AbsCoLa.NonNumRep subject -> failure x
  Parser.AbsCoLa.NonNumNamed subject -> failure x
  Parser.AbsCoLa.NonNumOther subject -> failure x

transNum :: Parser.AbsCoLa.Num -> Result
transNum x = case x of
  Parser.AbsCoLa.NumInt integer -> failure x

transReceiver :: Parser.AbsCoLa.Receiver -> Result
transReceiver x = case x of
  Parser.AbsCoLa.Rec subject -> failure x
