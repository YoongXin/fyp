-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelCola where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsCola

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsCola.Ident -> Result
transIdent x = case x of
  AbsCola.Ident string -> failure x

transContract :: AbsCola.Contract -> Result
transContract x = case x of
  AbsCola.ConEmpty -> failure x
  AbsCola.ConComp component -> failure x
  AbsCola.ConAnd component contract -> failure x

transComponent :: AbsCola.Component -> Result
transComponent x = case x of
  AbsCola.ComDef definition -> failure x
  AbsCola.ComConDef conditionaldefinition -> failure x
  AbsCola.ComState statement -> failure x
  AbsCola.ComConState conditionalstatement -> failure x

transDefinition :: AbsCola.Definition -> Result
transDefinition x = case x of
  AbsCola.DefSim simpledefinition -> failure x
  AbsCola.DefAnd simpledefinition definition -> failure x

transSimpleDefinition :: AbsCola.SimpleDefinition -> Result
transSimpleDefinition x = case x of
  AbsCola.SimDefIs id subject1 subject2 -> failure x
  AbsCola.SimDefEq id subject numericalexpression -> failure x

transNumericalExpression :: AbsCola.NumericalExpression -> Result
transNumericalExpression x = case x of
  AbsCola.NumExpNum num -> failure x
  AbsCola.NumExpObj numericalobject -> failure x
  AbsCola.NumExpOp numericalexpression1 operator numericalexpression2 -> failure x

transOperator :: AbsCola.Operator -> Result
transOperator x = case x of
  AbsCola.OpPlus -> failure x
  AbsCola.OpMin -> failure x
  AbsCola.OpMult -> failure x
  AbsCola.OpDiv -> failure x

transConditionalDefinition :: AbsCola.ConditionalDefinition -> Result
transConditionalDefinition x = case x of
  AbsCola.ConDefIf definition condition -> failure x
  AbsCola.ConDefIfThen condition definition -> failure x

transStatement :: AbsCola.Statement -> Result
transStatement x = case x of
  AbsCola.StateSim simplestatement -> failure x
  AbsCola.StateOr simplestatement statement -> failure x
  AbsCola.StateAnd simplestatement statement -> failure x

transConditionalStatement :: AbsCola.ConditionalStatement -> Result
transConditionalStatement x = case x of
  AbsCola.ConStateIf statement condition -> failure x
  AbsCola.ConStateIfThen condition statement -> failure x

transSimpleStatement :: AbsCola.SimpleStatement -> Result
transSimpleStatement x = case x of
  AbsCola.SimStateOne id holds subject modalverb verb object receiver date -> failure x
  AbsCola.SimStateTwo id holds subject date modalverb verb object receiver -> failure x
  AbsCola.SimStateThree id holds date subject modalverb verb object receiver -> failure x
  AbsCola.SimStateOneNH id subject modalverb verb object receiver date -> failure x
  AbsCola.SimStateTwoNH id subject date modalverb verb object receiver -> failure x
  AbsCola.SimStateThreeNH id date subject modalverb verb object receiver -> failure x

transCondition :: AbsCola.Condition -> Result
transCondition x = case x of
  AbsCola.CondiSim simplecondition -> failure x
  AbsCola.CondiOr simplecondition condition -> failure x
  AbsCola.CondiAnd simplecondition condition -> failure x

transSimpleCondition :: AbsCola.SimpleCondition -> Result
transSimpleCondition x = case x of
  AbsCola.SimConOne id holds subject verbstatus object receiver date -> failure x
  AbsCola.SimConTwo id holds subject date verbstatus object receiver -> failure x
  AbsCola.SimConThree id holds date subject verbstatus object receiver -> failure x
  AbsCola.SimConFour id holds subject modalverb verb object receiver date -> failure x
  AbsCola.SimConFive id holds booleanexpression -> failure x
  AbsCola.SimConOneNH id subject verbstatus object receiver date -> failure x
  AbsCola.SimConTwoNH id subject date verbstatus object receiver -> failure x
  AbsCola.SimConThreeNH id date subject verbstatus object receiver -> failure x
  AbsCola.SimConFourNH id subject modalverb verb object receiver date -> failure x
  AbsCola.SimConFiveNH id booleanexpression -> failure x

transBooleanExpression :: AbsCola.BooleanExpression -> Result
transBooleanExpression x = case x of
  AbsCola.BoolEx subject1 verbstatus comparison subject2 -> failure x

transID :: AbsCola.ID -> Result
transID x = case x of
  AbsCola.IDSim num -> failure x
  AbsCola.IDRep num1 num2 -> failure x

transHolds :: AbsCola.Holds -> Result
transHolds x = case x of
  AbsCola.HoldYes -> failure x
  AbsCola.HoldNo -> failure x

transSubject :: AbsCola.Subject -> Result
transSubject x = case x of
  AbsCola.SubQuoted string -> failure x
  AbsCola.SubUnQuoted ident -> failure x

transVerb :: AbsCola.Verb -> Result
transVerb x = case x of
  AbsCola.VDel -> failure x
  AbsCola.VPay -> failure x
  AbsCola.VCharge -> failure x
  AbsCola.VRefund -> failure x

transVerbStatus :: AbsCola.VerbStatus -> Result
transVerbStatus x = case x of
  AbsCola.VSDel -> failure x
  AbsCola.VSPay -> failure x
  AbsCola.VSCharge -> failure x
  AbsCola.VSRefund -> failure x

transComparison :: AbsCola.Comparison -> Result
transComparison x = case x of
  AbsCola.CompareLess -> failure x
  AbsCola.CompareEq equal -> failure x
  AbsCola.CompareMore more -> failure x

transEqual :: AbsCola.Equal -> Result
transEqual x = case x of
  AbsCola.EqOne -> failure x
  AbsCola.EqTwo -> failure x

transMore :: AbsCola.More -> Result
transMore x = case x of
  AbsCola.MoreOne -> failure x
  AbsCola.MoreTwo -> failure x

transModalVerb :: AbsCola.ModalVerb -> Result
transModalVerb x = case x of
  AbsCola.ModalObli obligation -> failure x
  AbsCola.ModalPermi -> failure x
  AbsCola.ModalForbi -> failure x

transObligation :: AbsCola.Obligation -> Result
transObligation x = case x of
  AbsCola.ObliOne -> failure x
  AbsCola.ObliTwo -> failure x

transDate :: AbsCola.Date -> Result
transDate x = case x of
  AbsCola.DateSpe num1 month num2 -> failure x
  AbsCola.DateAny -> failure x
  AbsCola.DateA -> failure x
  AbsCola.DateThe -> failure x
  AbsCola.DateMonRange temporalquantifier month -> failure x
  AbsCola.DateYearRange temporalquantifier num -> failure x
  AbsCola.DateRange temporalrange -> failure x

transTemporalQuantifier :: AbsCola.TemporalQuantifier -> Result
transTemporalQuantifier x = case x of
  AbsCola.TempWithin -> failure x
  AbsCola.TempAfter -> failure x
  AbsCola.TempBefore -> failure x
  AbsCola.TempIn -> failure x

transTemporalRange :: AbsCola.TemporalRange -> Result
transTemporalRange x = case x of
  AbsCola.BtwMonth month1 month2 -> failure x
  AbsCola.BtwYear num1 num2 -> failure x

transMonth :: AbsCola.Month -> Result
transMonth x = case x of
  AbsCola.MJan -> failure x
  AbsCola.MFeb -> failure x
  AbsCola.MMar -> failure x
  AbsCola.MApr -> failure x
  AbsCola.MMay -> failure x
  AbsCola.MJun -> failure x
  AbsCola.MJul -> failure x
  AbsCola.MAug -> failure x
  AbsCola.MSep -> failure x
  AbsCola.MOct -> failure x
  AbsCola.MNov -> failure x
  AbsCola.MDec -> failure x

transObject :: AbsCola.Object -> Result
transObject x = case x of
  AbsCola.ObjNu numericalobject -> failure x
  AbsCola.ObjNonNu nonnumericalobject -> failure x
  AbsCola.ObjAdjNonNu adjective nonnumericalobject -> failure x
  AbsCola.ObjRange numericalobject1 numericalobject2 -> failure x

transNumericalObject :: AbsCola.NumericalObject -> Result
transNumericalObject x = case x of
  AbsCola.NumPound pounds num -> failure x
  AbsCola.NumDol dollars num -> failure x
  AbsCola.NumEur euros num -> failure x
  AbsCola.NumAmount subject -> failure x

transPounds :: AbsCola.Pounds -> Result
transPounds x = case x of
  AbsCola.PoundOne -> failure x
  AbsCola.PoundTwo -> failure x
  AbsCola.PoundThree -> failure x

transDollars :: AbsCola.Dollars -> Result
transDollars x = case x of
  AbsCola.DollarOne -> failure x
  AbsCola.DollarTwo -> failure x
  AbsCola.DollarThree -> failure x

transEuros :: AbsCola.Euros -> Result
transEuros x = case x of
  AbsCola.EuroOne -> failure x
  AbsCola.EuroTwo -> failure x

transNonNumericalObject :: AbsCola.NonNumericalObject -> Result
transNonNumericalObject x = case x of
  AbsCola.NonNumCurr subject -> failure x
  AbsCola.NonNumRep subject -> failure x
  AbsCola.NonNumNamed subject -> failure x
  AbsCola.NonNumOther subject -> failure x

transNum :: AbsCola.Num -> Result
transNum x = case x of
  AbsCola.NumInt integer -> failure x

transAdjective :: AbsCola.Adjective -> Result
transAdjective x = case x of
  AbsCola.Adj subject -> failure x

transReceiver :: AbsCola.Receiver -> Result
transReceiver x = case x of
  AbsCola.Rec subject -> failure x
