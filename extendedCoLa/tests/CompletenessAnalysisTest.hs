module Test.CompletenessAnalysisTest where

import Test.QuickCheck
import Data.Map ( fromList )
import qualified Main as CoLaParser
import Parser.AbsCoLa 
import Helper.ExampleContracts
import ContractAnalysis.CompletenessAnalysis

prop_incompleteItems :: String -> CompletenessReport -> Property
prop_incompleteItems input expectedCompletenessReport =
    runCheckCompleteness (CoLaParser.parseContract input) === expectedCompletenessReport

prop_completenessScore :: String -> Integer -> Property
prop_completenessScore input expectedCompletenessScoring =
    let contract = CoLaParser.parseContract input
    in generateCompletenessScore (contract) (runCheckCompleteness contract) === expectedCompletenessScoring

prop_completenessReport :: String -> String -> Property
prop_completenessReport input expectedFinalCompletenessReport = 
    let contract = CoLaParser.parseContract input
        incompleteItems = runCheckCompleteness contract
        score = generateCompletenessScore contract incompleteItems
    in printCompletenessReport incompleteItems score === expectedFinalCompletenessReport

emptyContractIncompleteItems = IncompleteItems ([],[],[],[],fromList [])
simpleDefinitionIncompleteItems = IncompleteItems ([],[],[],[],fromList [])
andDefinitionIncompleteItems = IncompleteItems ([],[],[],[],fromList [])
conditionalDefinitionIncompleteItems = IncompleteItems ([SimConFour (IDSim (NumInt 1)) HoldYes (SubUnQuoted (Ident "Kelly")) (ModalObli ObliTwo) VCharge (ObjNu (NumAmount (SubUnQuoted (Ident "rental")))) (Rec (SubUnQuoted (Ident "Carol"))) (DateQuanSpecific TempBefore (NumInt 1) MJan (NumInt 2024))],[SimDefIs (IDSim (NumInt 2)) (SubUnQuoted (Ident "PartyA")) (SubUnQuoted (Ident "Carol"))],[],[],fromList [])
simpleStatementIncompleteItems = IncompleteItems ([],[],[],[],fromList [])
andStatementIncompleteItems = IncompleteItems ([],[],[],[],fromList [])
orStatementIncompleteItems = IncompleteItems ([],[],[],[],fromList [])
conditionalStatementIncompleteItems = IncompleteItems ([],[],[],[],fromList [])

completenessContractIncompleteItems1 = IncompleteItems ([SimConOne (IDSim (NumInt 1)) HoldYes (SubUnQuoted (Ident "Alice")) VSPay (ObjNu (NumPound PoundTwo (NumInt 10))) (Rec (SubUnQuoted (Ident "Bob"))) (DateSpe (DateSpeOn (NumInt 12) MFeb (NumInt 2024)))],[SimDefIs (IDSim (NumInt 2)) (SubUnQuoted (Ident "PartyA")) (SubUnQuoted (Ident "Alice"))],[],[],fromList [])
completenessContractIncompleteItems2 = IncompleteItems ([],[],[SimConOneNH (IDSim (NumInt 1)) (SubUnQuoted (Ident "Rachel")) VSCharge (ObjNu (NumPound PoundTwo (NumInt 72))) (Rec (SubUnQuoted (Ident "Elsa"))) (DateSome (SubUnQuoted (Ident "unknown")))],[SimStateOneNH (IDSim (NumInt 2)) (SubUnQuoted (Ident "Rachel")) (ModalObli ObliTwo) VDel (ObjNonNu (NonNumOther (SubUnQuoted (Ident "earphone")))) (Rec (SubUnQuoted (Ident "Elsa"))) (DateQuanTempThe TempBefore (TempOffDays (NumInt 3)) TempAfter (SubUnQuoted (Ident "unknown")))],fromList [])
completenessContractIncompleteItems3 = IncompleteItems ([],[],[],[],fromList [])
completenessContractIncompleteItems4 = IncompleteItems ([],[],[],[],fromList [("it is the case that Neo paid Kathy",[("more than","[1]")])])
completenessContractIncompleteItems5 = IncompleteItems ([],[],[],[],fromList [("it is the case that Cindy paid George",[("more than","[1]"),("less than","[4]"),("equal to","[5]")])])

bikeDeliveryOriginalIncompleteItems = IncompleteItems ([],[],[SimConOne (IDSim (NumInt 1)) HoldYes (SubUnQuoted (Ident "Alice")) VSPay (ObjNu (NumPound PoundTwo (NumInt 100))) (Rec (SubUnQuoted (Ident "Bob"))) (DateSpe (DateSpeOnThe (NumInt 1) MApr (NumInt 2021))),SimConOne (IDSim (NumInt 2)) HoldYes (SubUnQuoted (Ident "Alice")) VSPay (ObjNu (NumDol DollarTwo (NumInt 120))) (Rec (SubUnQuoted (Ident "Bob"))) (DateSpe (DateSpeOnThe (NumInt 1) MApr (NumInt 2021)))],[SimStateOne (IDSim (NumInt 3)) HoldYes (SubUnQuoted (Ident "Bob")) (ModalObli ObliTwo) VDel (ObjNonNu (NonNumOther (SubUnQuoted (Ident "bicycle")))) (Rec (SubUnQuoted (Ident "Alice"))) (DateSpe (DateSpeOnThe (NumInt 5) MApr (NumInt 2021)))],fromList [])
bikeDeliveryModifiedIncompleteItems = IncompleteItems ([],[],[SimConOne (IDSim (NumInt 1)) HoldYes (SubUnQuoted (Ident "Alice")) VSPay (ObjNu (NumPound PoundTwo (NumInt 100))) (Rec (SubUnQuoted (Ident "Bob"))) (DateSpe (DateSpeOnThe (NumInt 1) MApr (NumInt 2021))),SimConOne (IDSim (NumInt 2)) HoldYes (SubUnQuoted (Ident "Alice")) VSPay (ObjNu (NumDol DollarTwo (NumInt 120))) (Rec (SubUnQuoted (Ident "Bob"))) (DateSpe (DateSpeOnThe (NumInt 1) MApr (NumInt 2021)))],[SimStateOne (IDSim (NumInt 3)) HoldYes (SubUnQuoted (Ident "Bob")) (ModalObli ObliTwo) VDel (ObjNonNu (NonNumOther (SubUnQuoted (Ident "bicycle")))) (Rec (SubUnQuoted (Ident "Alice"))) (DateSpe (DateSpeOnThe (NumInt 5) MApr (NumInt 2021))),SimStateOne (IDSim (NumInt 4)) HoldYes (SubUnQuoted (Ident "Bob")) ModalPermi VDel (ObjNonNu (NonNumRep (SubUnQuoted (Ident "receipt")))) (Rec (SubUnQuoted (Ident "Alice"))) DateAny,SimStateOne (IDSim (NumInt 5)) HoldYes (SubUnQuoted (Ident "Bob")) ModalForbi VCharge (ObjNu (NumAmount (SubQuoted "delivery fee"))) (Rec (SubUnQuoted (Ident "Alice"))) DateAny],fromList [])
bikeDeliverySanctionIncompleteItems = IncompleteItems ([],[],[SimConOne (IDSim (NumInt 1)) HoldYes (SubUnQuoted (Ident "Alice")) VSPay (ObjNu (NumPound PoundTwo (NumInt 100))) (Rec (SubUnQuoted (Ident "Bob"))) (DateSpe (DateSpeOnThe (NumInt 1) MApr (NumInt 2021))),SimConOne (IDSim (NumInt 2)) HoldYes (SubUnQuoted (Ident "Alice")) VSPay (ObjNu (NumDol DollarTwo (NumInt 120))) (Rec (SubUnQuoted (Ident "Bob"))) (DateSpe (DateSpeOnThe (NumInt 1) MApr (NumInt 2021))),SimConOne (IDSim (NumInt 5)) HoldYes (SubUnQuoted (Ident "Bob")) VSDel (ObjNonNu (NonNumOther (SubUnQuoted (Ident "bicycle")))) (Rec (SubUnQuoted (Ident "Alice"))) (DateSpe (DateSpeOnThe (NumInt 5) MApr (NumInt 2021))),SimConOne (IDSim (NumInt 6)) HoldNo (SubUnQuoted (Ident "Bob")) VSCharge (ObjNu (NumAmount (SubQuoted "delivery fee"))) (Rec (SubUnQuoted (Ident "Alice"))) DateAny,SimConOne (IDSim (NumInt 9)) HoldNo (SubUnQuoted (Ident "Bob")) VSDel (ObjNonNu (NonNumOther (SubUnQuoted (Ident "bicycle")))) (Rec (SubUnQuoted (Ident "Alice"))) (DateSpe (DateSpeOnThe (NumInt 5) MApr (NumInt 2021)))],[SimStateOne (IDSim (NumInt 3)) HoldYes (SubUnQuoted (Ident "Bob")) (ModalObli ObliTwo) VDel (ObjNonNu (NonNumOther (SubUnQuoted (Ident "bicycle")))) (Rec (SubUnQuoted (Ident "Alice"))) (DateSpe (DateSpeOnThe (NumInt 5) MApr (NumInt 2021))),SimStateOne (IDSim (NumInt 4)) HoldYes (SubUnQuoted (Ident "Bob")) ModalForbi VCharge (ObjNu (NumAmount (SubQuoted "delivery fee"))) (Rec (SubUnQuoted (Ident "Alice"))) DateAny,SimStateOne (IDSim (NumInt 7)) HoldYes (SubUnQuoted (Ident "Bob")) ModalPermi VDel (ObjNonNu (NonNumRep (SubUnQuoted (Ident "receipt")))) (Rec (SubUnQuoted (Ident "Alice"))) DateAny,SimStateOne (IDSim (NumInt 8)) HoldYes (SubUnQuoted (Ident "Alice")) ModalPermi VCharge (ObjNu (NumPound PoundTwo (NumInt 100))) (Rec (SubUnQuoted (Ident "Bob"))) (DateSpe (DateSpeOn (NumInt 8) MApr (NumInt 2021)))],fromList [])
isdaOriginalIncompleteItems = IncompleteItems ([SimConFive (IDSim (NumInt 6)) HoldYes (BoolEx (SubUnQuoted (Ident "PartyA")) VSPay (CompareMore MoreOne) (SubUnQuoted (Ident "PartyB"))),SimConFive (IDSim (NumInt 9)) HoldYes (BoolEx (SubUnQuoted (Ident "PartyB")) VSPay (CompareMore MoreOne) (SubUnQuoted (Ident "PartyA")))],[SimDefIs (IDSim (NumInt 7)) (SubUnQuoted (Ident "ExcessParty")) (SubUnQuoted (Ident "PartyA")),SimDefEq (IDSim (NumInt 8)) (SubUnQuoted (Ident "ExcessAmount")) (NumExpOp (NumExpObj (NumAmount (SubUnQuoted (Ident "AmountA")))) OpMin (NumExpObj (NumAmount (SubUnQuoted (Ident "AmountB"))))),SimDefIs (IDSim (NumInt 10)) (SubUnQuoted (Ident "ExcessParty")) (SubUnQuoted (Ident "PartyB")),SimDefEq (IDSim (NumInt 11)) (SubUnQuoted (Ident "ExcessAmount")) (NumExpOp (NumExpObj (NumAmount (SubUnQuoted (Ident "AmountB")))) OpMin (NumExpObj (NumAmount (SubUnQuoted (Ident "AmountA")))))],[SimConFour (IDSim (NumInt 1)) HoldYes (SubUnQuoted (Ident "PartyA")) (ModalObli ObliOne) VPay (ObjNu (NumAmount (SubUnQuoted (Ident "AmountA")))) (Rec (SubUnQuoted (Ident "PartyB"))) (DateSome (SubUnQuoted (Ident "unknownOne"))),SimConFour (IDSim (NumInt 2)) HoldYes (SubUnQuoted (Ident "PartyB")) (ModalObli ObliOne) VPay (ObjNu (NumAmount (SubUnQuoted (Ident "AmountB")))) (Rec (SubUnQuoted (Ident "PartyA"))) (DateThe (SubUnQuoted (Ident "unknownOne")))],[SimStateOne (IDSim (NumInt 3)) HoldNo (SubUnQuoted (Ident "PartyA")) (ModalObli ObliOne) VPay (ObjNu (NumAmount (SubUnQuoted (Ident "AmountA")))) (Rec (SubUnQuoted (Ident "PartyB"))) (DateThe (SubUnQuoted (Ident "unknownOne"))),SimStateOne (IDSim (NumInt 4)) HoldNo (SubUnQuoted (Ident "PartyB")) (ModalObli ObliOne) VPay (ObjNu (NumAmount (SubUnQuoted (Ident "AmountB")))) (Rec (SubUnQuoted (Ident "PartyA"))) (DateThe (SubUnQuoted (Ident "unknownOne")))],fromList [("it is the case that PartyA paid PartyB",[("more than","[6]")]),("it is the case that PartyB paid PartyA",[("more than","[9]")])])
isdaModifiedIncompleteItems = IncompleteItems ([SimConFive (IDSim (NumInt 6)) HoldYes (BoolEx (SubUnQuoted (Ident "PartyA")) VSPay (CompareMore MoreOne) (SubUnQuoted (Ident "PartyB"))),SimConFive (IDSim (NumInt 9)) HoldYes (BoolEx (SubUnQuoted (Ident "PartyB")) VSPay (CompareMore MoreOne) (SubUnQuoted (Ident "PartyA")))],[SimDefIs (IDSim (NumInt 7)) (SubUnQuoted (Ident "ExcessParty")) (SubUnQuoted (Ident "PartyA")),SimDefEq (IDSim (NumInt 8)) (SubUnQuoted (Ident "ExcessAmount")) (NumExpOp (NumExpObj (NumAmount (SubUnQuoted (Ident "AmountA")))) OpMin (NumExpObj (NumAmount (SubUnQuoted (Ident "AmountB"))))),SimDefIs (IDSim (NumInt 10)) (SubUnQuoted (Ident "ExcessParty")) (SubUnQuoted (Ident "PartyA")),SimDefEq (IDSim (NumInt 11)) (SubUnQuoted (Ident "ExcessAmount")) (NumExpOp (NumExpObj (NumAmount (SubUnQuoted (Ident "AmountB")))) OpMin (NumExpObj (NumAmount (SubUnQuoted (Ident "AmountA")))))],[SimConFour (IDSim (NumInt 1)) HoldYes (SubUnQuoted (Ident "PartyA")) (ModalObli ObliOne) VPay (ObjNu (NumAmount (SubUnQuoted (Ident "AmountA")))) (Rec (SubUnQuoted (Ident "PartyB"))) (DateSpe (DateSpeOnThe (NumInt 1) MJan (NumInt 1970))),SimConFour (IDSim (NumInt 2)) HoldYes (SubUnQuoted (Ident "PartyB")) (ModalObli ObliOne) VPay (ObjNu (NumAmount (SubUnQuoted (Ident "AmountB")))) (Rec (SubUnQuoted (Ident "PartyA"))) (DateSpe (DateSpeOnThe (NumInt 1) MJan (NumInt 1970)))],[SimStateOne (IDSim (NumInt 3)) HoldNo (SubUnQuoted (Ident "PartyA")) (ModalObli ObliOne) VPay (ObjNu (NumAmount (SubUnQuoted (Ident "AmountA")))) (Rec (SubUnQuoted (Ident "PartyB"))) (DateSpe (DateSpeOnThe (NumInt 1) MJan (NumInt 1970))),SimStateOne (IDSim (NumInt 4)) HoldNo (SubUnQuoted (Ident "PartyB")) (ModalObli ObliOne) VPay (ObjNu (NumAmount (SubUnQuoted (Ident "AmountB")))) (Rec (SubUnQuoted (Ident "PartyA"))) (DateSpe (DateSpeOnThe (NumInt 1) MJan (NumInt 1970))),SimStateOne (IDSim (NumInt 5)) HoldYes (SubUnQuoted (Ident "Excessparty")) (ModalObli ObliOne) VPay (ObjNu (NumAmount (SubUnQuoted (Ident "ExcessAmount")))) (Rec (SubUnQuoted (Ident "AnotherParty"))) (DateThe (SubUnQuoted (Ident "unknownOne")))],fromList [("it is the case that PartyA paid PartyB",[("more than","[6]")]),("it is the case that PartyB paid PartyA",[("more than","[9]")])])
guarantorIncompleteItems = IncompleteItems ([],[],[SimConOne (IDSim (NumInt 2)) HoldYes (SubUnQuoted (Ident "Landlord")) VSDel (ObjNonNu (NonNumOther (SubUnQuoted (Ident "demandOfTenantPayment")))) (Rec (SubUnQuoted (Ident "Tenant"))) (DateSpe (DateSpeOnThe (NumInt 2) MApr (NumInt 2023))),SimConOne (IDSim (NumInt 3)) HoldNo (SubUnQuoted (Ident "Tenant")) VSPay (ObjNu (NumAmount (SubUnQuoted (Ident "AmountA")))) (Rec (SubUnQuoted (Ident "Landlord"))) (DateQuanSpecific TempBefore (NumInt 5) MApr (NumInt 2023)),SimConOne (IDSim (NumInt 5)) HoldYes (SubUnQuoted (Ident "Landlord")) VSDel (ObjNonNu (NonNumOther (SubUnQuoted (Ident "demandOfTenantPayment")))) (Rec (SubUnQuoted (Ident "Tenant"))) (DateSpe (DateSpeOnThe (NumInt 2) MApr (NumInt 2023))),SimConOne (IDSim (NumInt 6)) HoldNo (SubUnQuoted (Ident "Tenant")) VSPay (ObjNu (NumAmount (SubUnQuoted (Ident "AmountA")))) (Rec (SubUnQuoted (Ident "Landlord"))) (DateQuanSpecific TempBefore (NumInt 10) MApr (NumInt 2023)),SimConOne (IDSim (NumInt 7)) HoldYes (SubUnQuoted (Ident "Landlord")) VSDel (ObjNonNu (NonNumOther (SubUnQuoted (Ident "demandOfGuarantorPayment")))) (Rec (SubUnQuoted (Ident "Tenant"))) (DateSpe (DateSpeOnThe (NumInt 6) MApr (NumInt 2023))),SimConOne (IDSim (NumInt 9)) HoldNo (SubUnQuoted (Ident "Tenant")) VSPay (ObjNu (NumAmount (SubUnQuoted (Ident "AmountB")))) (Rec (SubUnQuoted (Ident "Landlord"))) (DateQuanSpecific TempBefore (NumInt 11) MSep (NumInt 2023)),SimConOne (IDSim (NumInt 11)) HoldYes (SubUnQuoted (Ident "HousingBenefitScheme")) VSPay (ObjNu (NumAmount (SubUnQuoted (Ident "AmountC")))) (Rec (SubUnQuoted (Ident "Tenant"))) (DateSpe (DateSpeOnThe (NumInt 1) MJan (NumInt 2024))),SimConOne (IDSim (NumInt 12)) HoldYes (SubUnQuoted (Ident "LocalAuthority")) VSDel (ObjNonNu (NonNumOther (SubUnQuoted (Ident "overpaymentClaim")))) (Rec (SubUnQuoted (Ident "Tenant"))) (DateSpe (DateSpeOnThe (NumInt 7) MJan (NumInt 2024)))],[SimStateOne (IDSim (NumInt 4)) HoldYes (SubUnQuoted (Ident "Landlord")) ModalPermi VDel (ObjNonNu (NonNumOther (SubUnQuoted (Ident "demandOfGuarantorPayment")))) (Rec (SubUnQuoted (Ident "Tenant"))) (DateSpe (DateSpeOnThe (NumInt 6) MApr (NumInt 2023))),SimStateOne (IDSim (NumInt 8)) HoldYes (SubUnQuoted (Ident "Guarantor")) (ModalObli ObliTwo) VPay (ObjNu (NumAmount (SubUnQuoted (Ident "AmountA")))) (Rec (SubUnQuoted (Ident "Landlord"))) (DateSpe (DateSpeOnThe (NumInt 11) MApr (NumInt 2023))),SimStateOne (IDSim (NumInt 10)) HoldYes (SubUnQuoted (Ident "Guarantor")) (ModalObli ObliTwo) VPay (ObjNu (NumAmount (SubUnQuoted (Ident "AmountB")))) (Rec (SubUnQuoted (Ident "Landlord"))) (DateSpe (DateSpeOnThe (NumInt 12) MSep (NumInt 2023))),SimStateOne (IDSim (NumInt 13)) HoldYes (SubUnQuoted (Ident "Guarantor")) (ModalObli ObliTwo) VPay (ObjNu (NumAmount (SubUnQuoted (Ident "AmountC")))) (Rec (SubUnQuoted (Ident "Landlord"))) (DateQuanSpecific TempBefore (NumInt 10) MJan (NumInt 2024))],fromList [])
employmentIncompleteItems = IncompleteItems ([],[],[SimConOneNH (IDSim (NumInt 2)) (SubUnQuoted (Ident "Employee")) VSDel (ObjNonNu (NonNumOther (SubUnQuoted (Ident "responsibilities")))) (Rec (SubUnQuoted (Ident "Employer"))) (DateQuanSpecific TempBefore (NumInt 25) MMar (NumInt 2024)),SimConOneNH (IDSim (NumInt 3)) (SubUnQuoted (Ident "Employee")) VSDel (ObjNonNu (NonNumOther (SubUnQuoted (Ident "absenceWithoutPriorNotice")))) (Rec (SubUnQuoted (Ident "Employer"))) (DateSome (SubUnQuoted (Ident "unknownOne"))),SimConOneNH (IDSim (NumInt 7)) (SubUnQuoted (Ident "Employee")) VSDel (ObjNonNu (NonNumRep (SubUnQuoted (Ident "requestForReimbursement")))) (Rec (SubUnQuoted (Ident "Employer"))) (DateThe (SubUnQuoted (Ident "unknownTwo"))),SimConOneNH (IDSim (NumInt 8)) (SubUnQuoted (Ident "Employee")) VSDel (ObjNonNu (NonNumOther (SubUnQuoted (Ident "extraHoursOfWork")))) (Rec (SubUnQuoted (Ident "Employer"))) (DateSome (SubUnQuoted (Ident "unknownThree"))),SimConOneNH (IDSim (NumInt 12)) (SubUnQuoted (Ident "Employee")) VSDel (ObjNonNu (NonNumOther (SubUnQuoted (Ident "targetOutperformance")))) (Rec (SubUnQuoted (Ident "Employer"))) (DateSome (SubUnQuoted (Ident "unknownFour")))],[SimStateOne (IDSim (NumInt 1)) HoldYes (SubUnQuoted (Ident "Employer")) (ModalObli ObliTwo) VPay (ObjNu (NumPound PoundTwo (NumInt 2500))) (Rec (SubUnQuoted (Ident "Employee"))) (DateSpe (DateSpeOn (NumInt 25) MMar (NumInt 2024))),SimStateOneNH (IDSim (NumInt 4)) (SubUnQuoted (Ident "Employee")) (ModalObli ObliTwo) VDel (ObjNonNu (NonNumRep (SubUnQuoted (Ident "absenceReason")))) (Rec (SubUnQuoted (Ident "Employer"))) (DateQuanTempThe TempBefore (TempOffDays (NumInt 3)) TempAfter (SubUnQuoted (Ident "unknownOne"))),SimStateOneNH (IDSim (NumInt 5)) (SubUnQuoted (Ident "Employer")) ModalPermi VCharge (ObjNu (NumPound PoundTwo (NumInt 100))) (Rec (SubUnQuoted (Ident "Employee"))) (DateQuanTheWO (TempOffWeeks (NumInt 4)) TempAfter (SubUnQuoted (Ident "unknownOne"))),SimStateOneNH (IDSim (NumInt 6)) (SubUnQuoted (Ident "Employee")) (ModalObli ObliTwo) VDel (ObjNonNu (NonNumRep (SubUnQuoted (Ident "approvalRequest")))) (Rec (SubUnQuoted (Ident "Employer"))) (DateQuanTempSome TempBefore (TempOffWeeks (NumInt 2)) TempAfter (SubUnQuoted (Ident "unknownTwo"))),SimStateOneNH (IDSim (NumInt 9)) (SubUnQuoted (Ident "Employer")) (ModalObli ObliTwo) VPay (ObjNu (NumAmount (SubUnQuoted (Ident "overtimePayment")))) (Rec (SubUnQuoted (Ident "Employee"))) (DateQuanTempThe TempBefore (TempOffWeeks (NumInt 4)) TempAfter (SubUnQuoted (Ident "unknownThree"))),SimStateOneNH (IDSim (NumInt 13)) (SubUnQuoted (Ident "Employer")) (ModalObli ObliTwo) VPay (ObjNu (NumAmount (SubUnQuoted (Ident "bonus")))) (Rec (SubUnQuoted (Ident "Employee"))) (DateQuanSomeWO (TempOffYear (NumInt 1)) TempAfter (SubUnQuoted (Ident "unknownFour")))],fromList [])
tenancyIncompleteItems = IncompleteItems ([],[],[SimConOne (IDSim (NumInt 2)) HoldYes (SubUnQuoted (Ident "Tenant")) VSPay (ObjNu (NumPound PoundTwo (NumInt 15000))) (Rec (SubUnQuoted (Ident "Landlord"))) (DateQuanSpecific TempBefore (NumInt 1) MSep (NumInt 2023)),SimConOne (IDSim (NumInt 6)) HoldYes (SubUnQuoted (Ident "Tenant")) VSDel (ObjNonNu (NonNumOther (SubUnQuoted (Ident "notDamagedProperty")))) (Rec (SubUnQuoted (Ident "Landlord"))) (DateSpe (DateSpeOnThe (NumInt 22) MSep (NumInt 2024))),SimConOne (IDSim (NumInt 7)) HoldYes (SubUnQuoted (Ident "Landlord")) VSCharge (ObjNu (NumAmount (SubUnQuoted (Ident "securityDeposit")))) (Rec (SubUnQuoted (Ident "Tenant"))) (DateSpe (DateSpeOn (NumInt 23) MAug (NumInt 2023))),SimConOne (IDSim (NumInt 9)) HoldYes (SubUnQuoted (Ident "Landlord")) VSCharge (ObjNu (NumAmount (SubUnQuoted (Ident "incrementInRental")))) (Rec (SubUnQuoted (Ident "Tenant"))) (DateSome (SubUnQuoted (Ident "unknown")))],[SimStateOne (IDSim (NumInt 1)) HoldYes (SubUnQuoted (Ident "Landlord")) (ModalObli ObliTwo) VDel (ObjNonNu (NonNumOther (SubUnQuoted (Ident "property")))) (Rec (SubUnQuoted (Ident "Tenant"))) (DateSpe (DateSpeOnThe (NumInt 23) MSep (NumInt 2023))),SimStateOne (IDSim (NumInt 8)) HoldYes (SubUnQuoted (Ident "Landlord")) (ModalObli ObliTwo) VRefund (ObjNu (NumAmount (SubUnQuoted (Ident "securityDeposit")))) (Rec (SubUnQuoted (Ident "Tenant"))) (DateQuanSpecific TempBefore (NumInt 1) MOct (NumInt 2024)),SimStateOne (IDSim (NumInt 10)) HoldYes (SubUnQuoted (Ident "Landlord")) (ModalObli ObliTwo) VDel (ObjNonNu (NonNumRep (SubUnQuoted (Ident "noticeOfRentalIncrement")))) (Rec (SubUnQuoted (Ident "Tenant"))) (DateQuanTheWO (TempOffWeeks (NumInt 4)) TempBefore (SubUnQuoted (Ident "unknown")))],fromList [])
serviceLevelAgreementIncompleteItems = IncompleteItems ([],[],[SimConOneNH (IDSim (NumInt 3)) (SubUnQuoted (Ident "ServiceProvider")) VSDel (ObjNonNu (NonNumOther (SubUnQuoted (Ident "agreedService")))) (Rec (SubUnQuoted (Ident "Client"))) (DateQuanSpecific TempAfter (NumInt 10) MFeb (NumInt 2024)),SimConOne (IDSim (NumInt 6)) HoldNo (SubUnQuoted (Ident "Client")) VSPay (ObjNu (NumPound PoundTwo (NumInt 100))) (Rec (SubUnQuoted (Ident "ServiceProvider"))) (DateQuanSpecific TempBefore (NumInt 10) MApr (NumInt 2024))],[SimStateOneNH (IDSim (NumInt 4)) (SubUnQuoted (Ident "ServiceProvider")) (ModalObli ObliTwo) VRefund (ObjNu (NumPound PoundTwo (NumInt 10))) (Rec (SubUnQuoted (Ident "Client"))) (DateQuanSpecific TempBefore (NumInt 17) MFeb (NumInt 2024)),SimStateOne (IDSim (NumInt 7)) HoldYes (SubUnQuoted (Ident "ServiceProvider")) ModalPermi VDel (ObjNonNu (NonNumRep (SubUnQuoted (Ident "terminationOfAgreement")))) (Rec (SubUnQuoted (Ident "Client"))) (DateQuanSpecific TempAfter (NumInt 10) MApr (NumInt 2024))],fromList [])

emptyContractCompletenessScore = 1
simpleDefinitionCompletenessScore = 1
andDefinitionCompletenessScore = 1
conditionalDefinitionCompletenessScore = 3
simpleStatementCompletenessScore = 2
andStatementCompletenessScore = 4
orStatementCompletenessScore = 5
conditionalStatementCompletenessScore = 5

completenessContractCompletenessScore1 = 3
completenessContractCompletenessScore2 = 4
completenessContractCompletenessScore3 = 5
completenessContractCompletenessScore4 = 6
completenessContractCompletenessScore5 = 10

bikeDeliveryOriginalCompletenessScore = 4
bikeDeliveryModifiedCompletenessScore = 2
bikeDeliverySanctionCompletenessScore = 3
isdaOriginalCompletenessScore = 5
isdaModifiedCompletenessScore = 4
guarantorCompletenessScore = 9
employmentCompletenessScore = 16
tenancyCompletenessScore = 10
serviceLevelAgreementCompletenessScore = 8

completenessContractFinalCompletenessReport1 = "\n=======================================================\nIncomplete Conditional Definitions (If without \"else\"):\n=======================================================\n\nConditions:\n[1] it is the case that Alice paid \163\&10 Bob on 12 February 2024\n\nDefinitions:\n[2] PartyA IS Alice\n\n======================================================\nIncomplete Conditional Statements (If without \"else\"):\n======================================================\n\nNone\n\n=============================================================================\nIncomplete Boolean Expressions (Value test that doesn't consider all values):\n=============================================================================\n\nNone\n\n===================\nCompleteness Score:\n===================\n\n3"
completenessContractFinalCompletenessReport2 = "\n=======================================================\nIncomplete Conditional Definitions (If without \"else\"):\n=======================================================\n\nNone\n\n======================================================\nIncomplete Conditional Statements (If without \"else\"):\n======================================================\n\nConditions:\n[1] Rachel charged \163\&72 Elsa on SOMEDATE unknown\n\nStatements:\n[2] Rachel must deliver OtherObject \"earphone\" Elsa  BEFORE 3 days AFTER THEDATE unknown\n\n=============================================================================\nIncomplete Boolean Expressions (Value test that doesn't consider all values):\n=============================================================================\n\nNone\n\n===================\nCompleteness Score:\n===================\n\n4"
completenessContractFinalCompletenessReport3 = "\n=======================================================\nIncomplete Conditional Definitions (If without \"else\"):\n=======================================================\n\nNone\n\n======================================================\nIncomplete Conditional Statements (If without \"else\"):\n======================================================\n\nNone\n\n=============================================================================\nIncomplete Boolean Expressions (Value test that doesn't consider all values):\n=============================================================================\n\nNone\n\n===================\nCompleteness Score:\n===================\n\n5"
completenessContractFinalCompletenessReport4 = "\n=======================================================\nIncomplete Conditional Definitions (If without \"else\"):\n=======================================================\n\nNone\n\n======================================================\nIncomplete Conditional Statements (If without \"else\"):\n======================================================\n\nNone\n\n=============================================================================\nIncomplete Boolean Expressions (Value test that doesn't consider all values):\n=============================================================================\n\n[1] it is the case that Neo paid more than Kathy\n\n\n===================\nCompleteness Score:\n===================\n\n6"
completenessContractFinalCompletenessReport5 = "\n=======================================================\nIncomplete Conditional Definitions (If without \"else\"):\n=======================================================\n\nNone\n\n======================================================\nIncomplete Conditional Statements (If without \"else\"):\n======================================================\n\nNone\n\n=============================================================================\nIncomplete Boolean Expressions (Value test that doesn't consider all values):\n=============================================================================\n\n\n\n===================\nCompleteness Score:\n===================\n\n10"

bikeDeliveryOriginalFinalCompletenessReport = "\n=======================================================\nIncomplete Conditional Definitions (If without \"else\"):\n=======================================================\n\nNone\n\n======================================================\nIncomplete Conditional Statements (If without \"else\"):\n======================================================\n\nConditions:\n[1] it is the case that Alice paid \163\&100 Bob on the 1 April 2021\n[2] it is the case that Alice paid $120 Bob on the 1 April 2021\n\nStatements:\n[3] it is the case that Bob must deliver OtherObject \"bicycle\" Alice on the 5 April 2021\n\n=============================================================================\nIncomplete Boolean Expressions (Value test that doesn't consider all values):\n=============================================================================\n\nNone\n\n===================\nCompleteness Score:\n===================\n\n4"
bikeDeliveryModifiedFinalCompletenessReport = "\n=======================================================\nIncomplete Conditional Definitions (If without \"else\"):\n=======================================================\n\nNone\n\n======================================================\nIncomplete Conditional Statements (If without \"else\"):\n======================================================\n\nConditions:\n[1] it is the case that Alice paid \163\&100 Bob on the 1 April 2021\n[2] it is the case that Alice paid $120 Bob on the 1 April 2021\n\nStatements:\n[3] it is the case that Bob must deliver OtherObject \"bicycle\" Alice on the 5 April 2021\n[4] it is the case that Bob may deliver Report \"receipt\" Alice on ANYDATE\n[5] it is the case that Bob is forbidden to charge Amount \"delivery fee\" Alice on ANYDATE\n\n=============================================================================\nIncomplete Boolean Expressions (Value test that doesn't consider all values):\n=============================================================================\n\nNone\n\n===================\nCompleteness Score:\n===================\n\n2"
bikeDeliverySanctionFinalCompletenessReport = "\n=======================================================\nIncomplete Conditional Definitions (If without \"else\"):\n=======================================================\n\nNone\n\n======================================================\nIncomplete Conditional Statements (If without \"else\"):\n======================================================\n\nConditions:\n[1] it is the case that Alice paid \163\&100 Bob on the 1 April 2021\n[2] it is the case that Alice paid $120 Bob on the 1 April 2021\n[5] it is the case that Bob delivered OtherObject \"bicycle\" Alice on the 5 April 2021\n[6] it is not the case that Bob charged Amount \"delivery fee\" Alice on ANYDATE\n[9] it is not the case that Bob delivered OtherObject \"bicycle\" Alice on the 5 April 2021\n\nStatements:\n[3] it is the case that Bob must deliver OtherObject \"bicycle\" Alice on the 5 April 2021\n[4] it is the case that Bob is forbidden to charge Amount \"delivery fee\" Alice on ANYDATE\n[7] it is the case that Bob may deliver Report \"receipt\" Alice on ANYDATE\n[8] it is the case that Alice may charge \163\&100 Bob on 8 April 2021\n\n=============================================================================\nIncomplete Boolean Expressions (Value test that doesn't consider all values):\n=============================================================================\n\nNone\n\n===================\nCompleteness Score:\n===================\n\n3"
isdaOriginalFinalCompletenessReport = "\n=======================================================\nIncomplete Conditional Definitions (If without \"else\"):\n=======================================================\n\nConditions:\n[6] it is the case that PartyA paid more than PartyB\n[9] it is the case that PartyB paid more than PartyA\n\nDefinitions:\n[7] ExcessParty IS PartyA\n[8] ExcessAmount EQUALS AmountA - AmountB\n[10] ExcessParty IS PartyB\n[11] ExcessAmount EQUALS AmountB - AmountA\n\n======================================================\nIncomplete Conditional Statements (If without \"else\"):\n======================================================\n\nConditions:\n[1] it is the case that PartyA shall pay Amount \"AmountA\" PartyB on SOMEDATE unknownOne\n[2] it is the case that PartyB shall pay Amount \"AmountB\" PartyA on THEDATE unknownOne\n\nStatements:\n[3] it is not the case that PartyA shall pay Amount \"AmountA\" PartyB on THEDATE unknownOne\n[4] it is not the case that PartyB shall pay Amount \"AmountB\" PartyA on THEDATE unknownOne\n\n=============================================================================\nIncomplete Boolean Expressions (Value test that doesn't consider all values):\n=============================================================================\n\n[9] it is the case that PartyB paid more than PartyA\n[6] it is the case that PartyA paid more than PartyB\n\n\n===================\nCompleteness Score:\n===================\n\n5"
isdaModifiedFinalCompletenessReport = "\n=======================================================\nIncomplete Conditional Definitions (If without \"else\"):\n=======================================================\n\nConditions:\n[6] it is the case that PartyA paid more than PartyB\n[9] it is the case that PartyB paid more than PartyA\n\nDefinitions:\n[7] ExcessParty IS PartyA\n[8] ExcessAmount EQUALS AmountA - AmountB\n[10] ExcessParty IS PartyA\n[11] ExcessAmount EQUALS AmountB - AmountA\n\n======================================================\nIncomplete Conditional Statements (If without \"else\"):\n======================================================\n\nConditions:\n[1] it is the case that PartyA shall pay Amount \"AmountA\" PartyB on the 1 January 1970\n[2] it is the case that PartyB shall pay Amount \"AmountB\" PartyA on the 1 January 1970\n\nStatements:\n[3] it is not the case that PartyA shall pay Amount \"AmountA\" PartyB on the 1 January 1970\n[4] it is not the case that PartyB shall pay Amount \"AmountB\" PartyA on the 1 January 1970\n[5] it is the case that Excessparty shall pay Amount \"ExcessAmount\" AnotherParty on THEDATE unknownOne\n\n=============================================================================\nIncomplete Boolean Expressions (Value test that doesn't consider all values):\n=============================================================================\n\n[9] it is the case that PartyB paid more than PartyA\n[6] it is the case that PartyA paid more than PartyB\n\n\n===================\nCompleteness Score:\n===================\n\n4"
guarantorFinalCompletenessReport = "\n=======================================================\nIncomplete Conditional Definitions (If without \"else\"):\n=======================================================\n\nNone\n\n======================================================\nIncomplete Conditional Statements (If without \"else\"):\n======================================================\n\nConditions:\n[2] it is the case that Landlord delivered OtherObject \"demandOfTenantPayment\" Tenant on the 2 April 2023\n[3] it is not the case that Tenant paid Amount \"AmountA\" Landlord  BEFORE 5 April 2023\n[5] it is the case that Landlord delivered OtherObject \"demandOfTenantPayment\" Tenant on the 2 April 2023\n[6] it is not the case that Tenant paid Amount \"AmountA\" Landlord  BEFORE 10 April 2023\n[7] it is the case that Landlord delivered OtherObject \"demandOfGuarantorPayment\" Tenant on the 6 April 2023\n[9] it is not the case that Tenant paid Amount \"AmountB\" Landlord  BEFORE 11 September 2023\n[11] it is the case that HousingBenefitScheme paid Amount \"AmountC\" Tenant on the 1 January 2024\n[12] it is the case that LocalAuthority delivered OtherObject \"overpaymentClaim\" Tenant on the 7 January 2024\n\nStatements:\n[4] it is the case that Landlord may deliver OtherObject \"demandOfGuarantorPayment\" Tenant on the 6 April 2023\n[8] it is the case that Guarantor must pay Amount \"AmountA\" Landlord on the 11 April 2023\n[10] it is the case that Guarantor must pay Amount \"AmountB\" Landlord on the 12 September 2023\n[13] it is the case that Guarantor must pay Amount \"AmountC\" Landlord  BEFORE 10 January 2024\n\n=============================================================================\nIncomplete Boolean Expressions (Value test that doesn't consider all values):\n=============================================================================\n\nNone\n\n===================\nCompleteness Score:\n===================\n\n9"
employmentFinalCompletenessReport = "\n=======================================================\nIncomplete Conditional Definitions (If without \"else\"):\n=======================================================\n\nNone\n\n======================================================\nIncomplete Conditional Statements (If without \"else\"):\n======================================================\n\nConditions:\n[2] Employee delivered OtherObject \"responsibilities\" Employer  BEFORE 25 March 2024\n[3] Employee delivered OtherObject \"absenceWithoutPriorNotice\" Employer on SOMEDATE unknownOne\n[7] Employee delivered Report \"requestForReimbursement\" Employer on THEDATE unknownTwo\n[8] Employee delivered OtherObject \"extraHoursOfWork\" Employer on SOMEDATE unknownThree\n[12] Employee delivered OtherObject \"targetOutperformance\" Employer on SOMEDATE unknownFour\n\nStatements:\n[1] it is the case that Employer must pay \163\&2500 Employee on 25 March 2024\n[4] Employee must deliver Report \"absenceReason\" Employer  BEFORE 3 days AFTER THEDATE unknownOne\n[5] Employer may charge \163\&100 Employee 4 weeks AFTER THEDATE unknownOne\n[6] Employee must deliver Report \"approvalRequest\" Employer  BEFORE 2 weeks AFTER SOMEDATE unknownTwo\n[9] Employer must pay Amount \"overtimePayment\" Employee  BEFORE 4 weeks AFTER THEDATE unknownThree\n[13] Employer must pay Amount \"bonus\" Employee 1 year AFTER SOMEDATE unknownFour\n\n=============================================================================\nIncomplete Boolean Expressions (Value test that doesn't consider all values):\n=============================================================================\n\nNone\n\n===================\nCompleteness Score:\n===================\n\n16"
tenancyFinalCompletenessReport = "\n=======================================================\nIncomplete Conditional Definitions (If without \"else\"):\n=======================================================\n\nNone\n\n======================================================\nIncomplete Conditional Statements (If without \"else\"):\n======================================================\n\nConditions:\n[2] it is the case that Tenant paid \163\&15000 Landlord  BEFORE 1 September 2023\n[6] it is the case that Tenant delivered OtherObject \"notDamagedProperty\" Landlord on the 22 September 2024\n[7] it is the case that Landlord charged Amount \"securityDeposit\" Tenant on 23 August 2023\n[9] it is the case that Landlord charged Amount \"incrementInRental\" Tenant on SOMEDATE unknown\n\nStatements:\n[1] it is the case that Landlord must deliver OtherObject \"property\" Tenant on the 23 September 2023\n[8] it is the case that Landlord must refund Amount \"securityDeposit\" Tenant  BEFORE 1 October 2024\n[10] it is the case that Landlord must deliver Report \"noticeOfRentalIncrement\" Tenant 4 weeks BEFORE THEDATE unknown\n\n=============================================================================\nIncomplete Boolean Expressions (Value test that doesn't consider all values):\n=============================================================================\n\nNone\n\n===================\nCompleteness Score:\n===================\n\n10"
serviceLevelAgreementFinalCompletenessReport = "\n=======================================================\nIncomplete Conditional Definitions (If without \"else\"):\n=======================================================\n\nNone\n\n======================================================\nIncomplete Conditional Statements (If without \"else\"):\n======================================================\n\nConditions:\n[3] ServiceProvider delivered OtherObject \"agreedService\" Client  AFTER 10 February 2024\n[6] it is not the case that Client paid \163\&100 ServiceProvider  BEFORE 10 April 2024\n\nStatements:\n[4] ServiceProvider must refund \163\&10 Client  BEFORE 17 February 2024\n[7] it is the case that ServiceProvider may deliver Report \"terminationOfAgreement\" Client  AFTER 10 April 2024\n\n=============================================================================\nIncomplete Boolean Expressions (Value test that doesn't consider all values):\n=============================================================================\n\nNone\n\n===================\nCompleteness Score:\n===================\n\n8"

incompleteItemsSampleTests :: [(String, CompletenessReport)]
incompleteItemsSampleTests = 
    [(emptyContract, emptyContractIncompleteItems)
    , (simpleDefinition1, simpleDefinitionIncompleteItems)
    , (andDefinition4, andDefinitionIncompleteItems)
    , (conditionalDefinition8, conditionalDefinitionIncompleteItems)
    , (simpleStatement3, simpleStatementIncompleteItems)
    , (andStatement3, andStatementIncompleteItems)
    , (orStatement1, orStatementIncompleteItems)
    , (conditionalStatement8, conditionalStatementIncompleteItems)
    , (completenessContract1, completenessContractIncompleteItems1)
    , (completenessContract2, completenessContractIncompleteItems2)
    , (completenessContract3, completenessContractIncompleteItems3)
    , (completenessContract4, completenessContractIncompleteItems4)
    , (completenessContract5, completenessContractIncompleteItems5)
    , (bikeDeliveryOriginal, bikeDeliveryOriginalIncompleteItems)
    , (bikeDeliveryModified, bikeDeliveryModifiedIncompleteItems)
    , (bikeDeliverySanction, bikeDeliverySanctionIncompleteItems)
    , (isdaOriginal, isdaOriginalIncompleteItems)
    , (isdaModified, isdaModifiedIncompleteItems)
    , (guarantor, guarantorIncompleteItems)
    , (employment, employmentIncompleteItems)
    , (tenancy, tenancyIncompleteItems)
    , (serviceLevelAgreement, serviceLevelAgreementIncompleteItems)]

completenessScoreSampleTests :: [(String, Integer)]
completenessScoreSampleTests = 
    [(emptyContract, emptyContractCompletenessScore)
    , (simpleDefinition1, simpleDefinitionCompletenessScore)
    , (andDefinition4, andDefinitionCompletenessScore)
    , (conditionalDefinition8, conditionalDefinitionCompletenessScore)
    , (simpleStatement3, simpleStatementCompletenessScore)
    , (andStatement3, andStatementCompletenessScore)
    , (orStatement1, orStatementCompletenessScore)
    , (conditionalStatement8, conditionalStatementCompletenessScore)
    , (completenessContract1, completenessContractCompletenessScore1)
    , (completenessContract2, completenessContractCompletenessScore2)
    , (completenessContract3, completenessContractCompletenessScore3)
    , (completenessContract4, completenessContractCompletenessScore4)
    , (completenessContract5, completenessContractCompletenessScore5)
    , (bikeDeliveryOriginal, bikeDeliveryOriginalCompletenessScore)
    , (bikeDeliveryModified, bikeDeliveryModifiedCompletenessScore)
    , (bikeDeliverySanction, bikeDeliverySanctionCompletenessScore)
    , (isdaOriginal, isdaOriginalCompletenessScore)
    , (isdaModified, isdaModifiedCompletenessScore)
    , (guarantor, guarantorCompletenessScore)
    , (employment, employmentCompletenessScore)
    , (tenancy, tenancyCompletenessScore)
    , (serviceLevelAgreement, serviceLevelAgreementCompletenessScore)]

finalCompletenessReportSampleTests :: [(String, String)]
finalCompletenessReportSampleTests =
    [(completenessContract1, completenessContractFinalCompletenessReport1)
    , (completenessContract2, completenessContractFinalCompletenessReport2)
    , (completenessContract3, completenessContractFinalCompletenessReport3)
    , (completenessContract4, completenessContractFinalCompletenessReport4)
    , (completenessContract5, completenessContractFinalCompletenessReport5)
    , (bikeDeliveryOriginal, bikeDeliveryOriginalFinalCompletenessReport)
    , (bikeDeliveryModified, bikeDeliveryModifiedFinalCompletenessReport)
    , (bikeDeliverySanction, bikeDeliverySanctionFinalCompletenessReport)
    , (isdaOriginal, isdaOriginalFinalCompletenessReport)
    , (isdaModified, isdaModifiedFinalCompletenessReport)
    , (guarantor, guarantorFinalCompletenessReport)
    , (employment, employmentFinalCompletenessReport)
    , (tenancy, tenancyFinalCompletenessReport)
    , (serviceLevelAgreement, serviceLevelAgreementFinalCompletenessReport)]
    

completenessAnalysisTest :: IO ()
completenessAnalysisTest = do
    putStrLn "Running QuickCheck tests for abstracting incomplete items ..."
    quickCheck $ forAll (elements incompleteItemsSampleTests) (\(input, expected) -> prop_incompleteItems input expected)
    putStrLn "Running QuickCheck tests for generating completeness score ..."
    quickCheck $ forAll (elements completenessScoreSampleTests) (\(input, expected) -> prop_completenessScore input expected)
    putStrLn "Running QuickCheck tests for completeness analysis pipeline  ..."
    quickCheck $ forAll (elements finalCompletenessReportSampleTests) (\(input, expected) -> prop_completenessReport input expected)
    putStrLn "Done."
