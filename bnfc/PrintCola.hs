-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for PrintCola.

module PrintCola where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified AbsCola

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t, null spc, null rest) of
      (True , _   , True ) -> []             -- remove trailing space
      (False, _   , True ) -> t              -- remove trailing space
      (False, True, False) -> t ++ ' ' : s   -- add space if none
      _                    -> t ++ s
    where
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsCola.Ident where
  prt _ (AbsCola.Ident i) = doc $ showString i
instance Print AbsCola.Contract where
  prt i = \case
    AbsCola.ConEmpty -> prPrec i 0 (concatD [])
    AbsCola.ConComp component -> prPrec i 0 (concatD [prt 0 component])
    AbsCola.ConAnd component contract -> prPrec i 0 (concatD [prt 0 component, doc (showString "C-AND"), prt 0 contract])

instance Print AbsCola.Component where
  prt i = \case
    AbsCola.ComDef definition -> prPrec i 0 (concatD [prt 0 definition])
    AbsCola.ComConDef conditionaldefinition -> prPrec i 0 (concatD [prt 0 conditionaldefinition])
    AbsCola.ComState statement -> prPrec i 0 (concatD [prt 0 statement])
    AbsCola.ComConState conditionalstatement -> prPrec i 0 (concatD [prt 0 conditionalstatement])

instance Print AbsCola.Definition where
  prt i = \case
    AbsCola.DefSim simpledefinition -> prPrec i 0 (concatD [prt 0 simpledefinition])
    AbsCola.DefAnd simpledefinition definition -> prPrec i 0 (concatD [prt 0 simpledefinition, doc (showString "AND"), prt 0 definition])

instance Print AbsCola.SimpleDefinition where
  prt i = \case
    AbsCola.SimDefIs id_ subject1 subject2 -> prPrec i 0 (concatD [prt 0 id_, prt 0 subject1, doc (showString "IS"), prt 0 subject2])
    AbsCola.SimDefEq id_ subject numericalexpression -> prPrec i 0 (concatD [prt 0 id_, prt 0 subject, doc (showString "EQUALS"), prt 0 numericalexpression])

instance Print AbsCola.NumericalExpression where
  prt i = \case
    AbsCola.NumExpNum num -> prPrec i 0 (concatD [prt 0 num])
    AbsCola.NumExpObj numericalobject -> prPrec i 0 (concatD [prt 0 numericalobject])
    AbsCola.NumExpOp numericalexpression1 operator numericalexpression2 -> prPrec i 0 (concatD [prt 0 numericalexpression1, prt 0 operator, prt 0 numericalexpression2])

instance Print AbsCola.Operator where
  prt i = \case
    AbsCola.OpPlus -> prPrec i 0 (concatD [doc (showString "PLUS")])
    AbsCola.OpMin -> prPrec i 0 (concatD [doc (showString "MINUS")])
    AbsCola.OpMult -> prPrec i 0 (concatD [doc (showString "TIMES")])
    AbsCola.OpDiv -> prPrec i 0 (concatD [doc (showString "DIVIDE")])

instance Print AbsCola.ConditionalDefinition where
  prt i = \case
    AbsCola.ConDefIf definition condition -> prPrec i 0 (concatD [prt 0 definition, doc (showString "IF"), prt 0 condition])
    AbsCola.ConDefIfThen condition definition -> prPrec i 0 (concatD [doc (showString "IF"), prt 0 condition, doc (showString "THEN"), prt 0 definition])

instance Print AbsCola.Statement where
  prt i = \case
    AbsCola.StateSim simplestatement -> prPrec i 0 (concatD [prt 0 simplestatement])
    AbsCola.StateOr simplestatement statement -> prPrec i 0 (concatD [prt 0 simplestatement, doc (showString "OR"), prt 0 statement])
    AbsCola.StateAnd simplestatement statement -> prPrec i 0 (concatD [prt 0 simplestatement, doc (showString "AND"), prt 0 statement])

instance Print AbsCola.ConditionalStatement where
  prt i = \case
    AbsCola.ConStateIf statement condition -> prPrec i 0 (concatD [prt 0 statement, doc (showString "IF"), prt 0 condition])
    AbsCola.ConStateIfThen condition statement -> prPrec i 0 (concatD [doc (showString "IF"), prt 0 condition, doc (showString "THEN"), prt 0 statement])

instance Print AbsCola.SimpleStatement where
  prt i = \case
    AbsCola.SimStateOne id_ holds subject modalverb verb object receiver date -> prPrec i 0 (concatD [prt 0 id_, prt 0 holds, prt 0 subject, prt 0 modalverb, prt 0 verb, prt 0 object, prt 0 receiver, prt 0 date])
    AbsCola.SimStateTwo id_ holds subject date modalverb verb object receiver -> prPrec i 0 (concatD [prt 0 id_, prt 0 holds, prt 0 subject, prt 0 date, prt 0 modalverb, prt 0 verb, prt 0 object, prt 0 receiver])
    AbsCola.SimStateThree id_ holds date subject modalverb verb object receiver -> prPrec i 0 (concatD [prt 0 id_, prt 0 holds, prt 0 date, prt 0 subject, prt 0 modalverb, prt 0 verb, prt 0 object, prt 0 receiver])
    AbsCola.SimStateOneNH id_ subject modalverb verb object receiver date -> prPrec i 0 (concatD [prt 0 id_, prt 0 subject, prt 0 modalverb, prt 0 verb, prt 0 object, prt 0 receiver, prt 0 date])
    AbsCola.SimStateTwoNH id_ subject date modalverb verb object receiver -> prPrec i 0 (concatD [prt 0 id_, prt 0 subject, prt 0 date, prt 0 modalverb, prt 0 verb, prt 0 object, prt 0 receiver])
    AbsCola.SimStateThreeNH id_ date subject modalverb verb object receiver -> prPrec i 0 (concatD [prt 0 id_, prt 0 date, prt 0 subject, prt 0 modalverb, prt 0 verb, prt 0 object, prt 0 receiver])

instance Print AbsCola.Condition where
  prt i = \case
    AbsCola.CondiSim simplecondition -> prPrec i 0 (concatD [prt 0 simplecondition])
    AbsCola.CondiOr simplecondition condition -> prPrec i 0 (concatD [prt 0 simplecondition, doc (showString "OR"), prt 0 condition])
    AbsCola.CondiAnd simplecondition condition -> prPrec i 0 (concatD [prt 0 simplecondition, doc (showString "AND"), prt 0 condition])

instance Print AbsCola.SimpleCondition where
  prt i = \case
    AbsCola.SimConOne id_ holds subject verbstatus object receiver date -> prPrec i 0 (concatD [prt 0 id_, prt 0 holds, prt 0 subject, prt 0 verbstatus, prt 0 object, prt 0 receiver, prt 0 date])
    AbsCola.SimConTwo id_ holds subject date verbstatus object receiver -> prPrec i 0 (concatD [prt 0 id_, prt 0 holds, prt 0 subject, prt 0 date, prt 0 verbstatus, prt 0 object, prt 0 receiver])
    AbsCola.SimConThree id_ holds date subject verbstatus object receiver -> prPrec i 0 (concatD [prt 0 id_, prt 0 holds, prt 0 date, prt 0 subject, prt 0 verbstatus, prt 0 object, prt 0 receiver])
    AbsCola.SimConFour id_ holds subject modalverb verb object receiver date -> prPrec i 0 (concatD [prt 0 id_, prt 0 holds, prt 0 subject, prt 0 modalverb, prt 0 verb, prt 0 object, prt 0 receiver, prt 0 date])
    AbsCola.SimConFive id_ holds booleanexpression -> prPrec i 0 (concatD [prt 0 id_, prt 0 holds, prt 0 booleanexpression])
    AbsCola.SimConOneNH id_ subject verbstatus object receiver date -> prPrec i 0 (concatD [prt 0 id_, prt 0 subject, prt 0 verbstatus, prt 0 object, prt 0 receiver, prt 0 date])
    AbsCola.SimConTwoNH id_ subject date verbstatus object receiver -> prPrec i 0 (concatD [prt 0 id_, prt 0 subject, prt 0 date, prt 0 verbstatus, prt 0 object, prt 0 receiver])
    AbsCola.SimConThreeNH id_ date subject verbstatus object receiver -> prPrec i 0 (concatD [prt 0 id_, prt 0 date, prt 0 subject, prt 0 verbstatus, prt 0 object, prt 0 receiver])
    AbsCola.SimConFourNH id_ subject modalverb verb object receiver date -> prPrec i 0 (concatD [prt 0 id_, prt 0 subject, prt 0 modalverb, prt 0 verb, prt 0 object, prt 0 receiver, prt 0 date])
    AbsCola.SimConFiveNH id_ booleanexpression -> prPrec i 0 (concatD [prt 0 id_, prt 0 booleanexpression])

instance Print AbsCola.BooleanExpression where
  prt i = \case
    AbsCola.BoolEx subject1 verbstatus comparison subject2 -> prPrec i 0 (concatD [prt 0 subject1, prt 0 verbstatus, prt 0 comparison, prt 0 subject2])

instance Print AbsCola.ID where
  prt i = \case
    AbsCola.IDSim num -> prPrec i 0 (concatD [doc (showString "["), prt 0 num, doc (showString "]")])
    AbsCola.IDRep num1 num2 -> prPrec i 0 (concatD [doc (showString "["), prt 0 num1, doc (showString "("), prt 0 num2, doc (showString ")"), doc (showString "]")])

instance Print AbsCola.Holds where
  prt i = \case
    AbsCola.HoldYes -> prPrec i 0 (concatD [doc (showString "it"), doc (showString "is"), doc (showString "the"), doc (showString "case"), doc (showString "that")])
    AbsCola.HoldNo -> prPrec i 0 (concatD [doc (showString "it"), doc (showString "is"), doc (showString "not"), doc (showString "the"), doc (showString "case"), doc (showString "that")])

instance Print AbsCola.Subject where
  prt i = \case
    AbsCola.SubQuoted str -> prPrec i 0 (concatD [printString str])
    AbsCola.SubUnQuoted id_ -> prPrec i 0 (concatD [prt 0 id_])

instance Print AbsCola.Verb where
  prt i = \case
    AbsCola.VDel -> prPrec i 0 (concatD [doc (showString "deliver")])
    AbsCola.VPay -> prPrec i 0 (concatD [doc (showString "pay")])
    AbsCola.VCharge -> prPrec i 0 (concatD [doc (showString "charge")])
    AbsCola.VRefund -> prPrec i 0 (concatD [doc (showString "refund")])

instance Print AbsCola.VerbStatus where
  prt i = \case
    AbsCola.VSDel -> prPrec i 0 (concatD [doc (showString "delivered")])
    AbsCola.VSPay -> prPrec i 0 (concatD [doc (showString "paid")])
    AbsCola.VSCharge -> prPrec i 0 (concatD [doc (showString "charged")])
    AbsCola.VSRefund -> prPrec i 0 (concatD [doc (showString "refunded")])

instance Print AbsCola.Comparison where
  prt i = \case
    AbsCola.CompareLess -> prPrec i 0 (concatD [doc (showString "less"), doc (showString "than")])
    AbsCola.CompareEq equal -> prPrec i 0 (concatD [prt 0 equal])
    AbsCola.CompareMore more -> prPrec i 0 (concatD [prt 0 more])

instance Print AbsCola.Equal where
  prt i = \case
    AbsCola.EqOne -> prPrec i 0 (concatD [doc (showString "equals")])
    AbsCola.EqTwo -> prPrec i 0 (concatD [doc (showString "equal"), doc (showString "to")])

instance Print AbsCola.More where
  prt i = \case
    AbsCola.MoreOne -> prPrec i 0 (concatD [doc (showString "more"), doc (showString "than")])
    AbsCola.MoreTwo -> prPrec i 0 (concatD [doc (showString "greater"), doc (showString "than")])

instance Print AbsCola.ModalVerb where
  prt i = \case
    AbsCola.ModalObli obligation -> prPrec i 0 (concatD [prt 0 obligation])
    AbsCola.ModalPermi -> prPrec i 0 (concatD [doc (showString "may")])
    AbsCola.ModalForbi -> prPrec i 0 (concatD [doc (showString "is"), doc (showString "forbidden"), doc (showString "to")])

instance Print AbsCola.Obligation where
  prt i = \case
    AbsCola.ObliOne -> prPrec i 0 (concatD [doc (showString "shall")])
    AbsCola.ObliTwo -> prPrec i 0 (concatD [doc (showString "must")])

instance Print AbsCola.Date where
  prt i = \case
    AbsCola.DateSpe num1 month num2 -> prPrec i 0 (concatD [doc (showString "on"), doc (showString "the"), prt 0 num1, prt 0 month, prt 0 num2])
    AbsCola.DateAny -> prPrec i 0 (concatD [doc (showString "on"), doc (showString "ANYDATE")])
    AbsCola.DateA -> prPrec i 0 (concatD [doc (showString "on"), doc (showString "ADATE")])
    AbsCola.DateThe -> prPrec i 0 (concatD [doc (showString "on"), doc (showString "THEDATE")])
    AbsCola.DateMonRange temporalquantifier month -> prPrec i 0 (concatD [prt 0 temporalquantifier, prt 0 month])
    AbsCola.DateYearRange temporalquantifier num -> prPrec i 0 (concatD [prt 0 temporalquantifier, prt 0 num])
    AbsCola.DateRange temporalrange -> prPrec i 0 (concatD [prt 0 temporalrange])

instance Print AbsCola.TemporalQuantifier where
  prt i = \case
    AbsCola.TempWithin -> prPrec i 0 (concatD [doc (showString "within")])
    AbsCola.TempAfter -> prPrec i 0 (concatD [doc (showString "after")])
    AbsCola.TempBefore -> prPrec i 0 (concatD [doc (showString "before")])
    AbsCola.TempIn -> prPrec i 0 (concatD [doc (showString "in")])

instance Print AbsCola.TemporalRange where
  prt i = \case
    AbsCola.BtwMonth month1 month2 -> prPrec i 0 (concatD [doc (showString "between"), prt 0 month1, doc (showString "and"), prt 0 month2])
    AbsCola.BtwYear num1 num2 -> prPrec i 0 (concatD [doc (showString "between"), prt 0 num1, doc (showString "and"), prt 0 num2])

instance Print AbsCola.Month where
  prt i = \case
    AbsCola.MJan -> prPrec i 0 (concatD [doc (showString "January")])
    AbsCola.MFeb -> prPrec i 0 (concatD [doc (showString "February")])
    AbsCola.MMar -> prPrec i 0 (concatD [doc (showString "March")])
    AbsCola.MApr -> prPrec i 0 (concatD [doc (showString "April")])
    AbsCola.MMay -> prPrec i 0 (concatD [doc (showString "May")])
    AbsCola.MJun -> prPrec i 0 (concatD [doc (showString "June")])
    AbsCola.MJul -> prPrec i 0 (concatD [doc (showString "July")])
    AbsCola.MAug -> prPrec i 0 (concatD [doc (showString "August")])
    AbsCola.MSep -> prPrec i 0 (concatD [doc (showString "September")])
    AbsCola.MOct -> prPrec i 0 (concatD [doc (showString "October")])
    AbsCola.MNov -> prPrec i 0 (concatD [doc (showString "November")])
    AbsCola.MDec -> prPrec i 0 (concatD [doc (showString "December")])

instance Print AbsCola.Object where
  prt i = \case
    AbsCola.ObjNu numericalobject -> prPrec i 0 (concatD [prt 0 numericalobject])
    AbsCola.ObjNonNu nonnumericalobject -> prPrec i 0 (concatD [prt 0 nonnumericalobject])
    AbsCola.ObjAdjNonNu adjective nonnumericalobject -> prPrec i 0 (concatD [prt 0 adjective, prt 0 nonnumericalobject])
    AbsCola.ObjRange numericalobject1 numericalobject2 -> prPrec i 0 (concatD [doc (showString "between"), prt 0 numericalobject1, doc (showString "and"), prt 0 numericalobject2])

instance Print AbsCola.NumericalObject where
  prt i = \case
    AbsCola.NumPound pounds num -> prPrec i 0 (concatD [prt 0 pounds, prt 0 num])
    AbsCola.NumDol dollars num -> prPrec i 0 (concatD [prt 0 dollars, prt 0 num])
    AbsCola.NumEur euros num -> prPrec i 0 (concatD [prt 0 euros, prt 0 num])
    AbsCola.NumAmount subject -> prPrec i 0 (concatD [doc (showString "AMOUNT"), prt 0 subject])

instance Print AbsCola.Pounds where
  prt i = \case
    AbsCola.PoundOne -> prPrec i 0 (concatD [doc (showString "GBP")])
    AbsCola.PoundTwo -> prPrec i 0 (concatD [doc (showString "POUNDS")])
    AbsCola.PoundThree -> prPrec i 0 (concatD [doc (showString "quid")])

instance Print AbsCola.Dollars where
  prt i = \case
    AbsCola.DollarOne -> prPrec i 0 (concatD [doc (showString "USD")])
    AbsCola.DollarTwo -> prPrec i 0 (concatD [doc (showString "DOLLARS")])
    AbsCola.DollarThree -> prPrec i 0 (concatD [doc (showString "buck")])

instance Print AbsCola.Euros where
  prt i = \case
    AbsCola.EuroOne -> prPrec i 0 (concatD [doc (showString "EUR")])
    AbsCola.EuroTwo -> prPrec i 0 (concatD [doc (showString "EUROS")])

instance Print AbsCola.NonNumericalObject where
  prt i = \case
    AbsCola.NonNumCurr subject -> prPrec i 0 (concatD [doc (showString "SOMECURRENCY"), prt 0 subject])
    AbsCola.NonNumRep subject -> prPrec i 0 (concatD [doc (showString "REPORT"), prt 0 subject])
    AbsCola.NonNumNamed subject -> prPrec i 0 (concatD [doc (showString "NAMEDOBJECT"), prt 0 subject])
    AbsCola.NonNumOther subject -> prPrec i 0 (concatD [doc (showString "OTHEROBJECT"), prt 0 subject])

instance Print AbsCola.Num where
  prt i = \case
    AbsCola.NumInt n -> prPrec i 0 (concatD [prt 0 n])

instance Print AbsCola.Adjective where
  prt i = \case
    AbsCola.Adj subject -> prPrec i 0 (concatD [doc (showString "ADJECTIVE"), prt 0 subject])

instance Print AbsCola.Receiver where
  prt i = \case
    AbsCola.Rec subject -> prPrec i 0 (concatD [doc (showString "to"), prt 0 subject])
