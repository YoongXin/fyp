-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelCoLa where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsCoLa

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsCoLa.Ident -> Result
transIdent x = case x of
  AbsCoLa.Ident string -> failure x

transContract :: AbsCoLa.Contract -> Result
transContract x = case x of
  AbsCoLa.ConEmpty -> failure x
  AbsCoLa.ConComp component -> failure x
  AbsCoLa.ConAnd component contract -> failure x

transComponent :: AbsCoLa.Component -> Result
transComponent x = case x of
  AbsCoLa.ComDef definition -> failure x
  AbsCoLa.ComConDef conditionaldefinition -> failure x
  AbsCoLa.ComState statement -> failure x
  AbsCoLa.ComConState conditionalstatement -> failure x

transDefinition :: AbsCoLa.Definition -> Result
transDefinition x = case x of
  AbsCoLa.DefSim simpledefinition -> failure x
  AbsCoLa.DefAnd simpledefinition definition -> failure x

transSimpleDefinition :: AbsCoLa.SimpleDefinition -> Result
transSimpleDefinition x = case x of
  AbsCoLa.SimDefIs id subject1 subject2 -> failure x
  AbsCoLa.SimDefEq id subject numericalexpression -> failure x

transNumericalExpression :: AbsCoLa.NumericalExpression -> Result
transNumericalExpression x = case x of
  AbsCoLa.NumExpNum num -> failure x
  AbsCoLa.NumExpObj numericalobject -> failure x
  AbsCoLa.NumExpOp numericalexpression1 operator numericalexpression2 -> failure x

transOperator :: AbsCoLa.Operator -> Result
transOperator x = case x of
  AbsCoLa.OpPlus -> failure x
  AbsCoLa.OpMin -> failure x
  AbsCoLa.OpMult -> failure x
  AbsCoLa.OpDiv -> failure x

transConditionalDefinition :: AbsCoLa.ConditionalDefinition -> Result
transConditionalDefinition x = case x of
  AbsCoLa.ConDefIf definition condition -> failure x
  AbsCoLa.ConDefIfThen condition definition -> failure x

transStatement :: AbsCoLa.Statement -> Result
transStatement x = case x of
  AbsCoLa.StateSim simplestatement -> failure x
  AbsCoLa.StateOr simplestatement statement -> failure x
  AbsCoLa.StateAnd simplestatement statement -> failure x

transConditionalStatement :: AbsCoLa.ConditionalStatement -> Result
transConditionalStatement x = case x of
  AbsCoLa.ConStateIf statement condition -> failure x
  AbsCoLa.ConStateIfThen condition statement -> failure x

transSimpleStatement :: AbsCoLa.SimpleStatement -> Result
transSimpleStatement x = case x of
  AbsCoLa.SimStateOne id holds subject modalverb verb object receiver date -> failure x
  AbsCoLa.SimStateTwo id holds subject date modalverb verb object receiver -> failure x
  AbsCoLa.SimStateThree id holds date subject modalverb verb object receiver -> failure x
  AbsCoLa.SimStateOneNH id subject modalverb verb object receiver date -> failure x
  AbsCoLa.SimStateTwoNH id subject date modalverb verb object receiver -> failure x
  AbsCoLa.SimStateThreeNH id date subject modalverb verb object receiver -> failure x

transCondition :: AbsCoLa.Condition -> Result
transCondition x = case x of
  AbsCoLa.CondiSim simplecondition -> failure x
  AbsCoLa.CondiOr simplecondition condition -> failure x
  AbsCoLa.CondiAnd simplecondition condition -> failure x

transSimpleCondition :: AbsCoLa.SimpleCondition -> Result
transSimpleCondition x = case x of
  AbsCoLa.SimConOne id holds subject verbstatus object receiver date -> failure x
  AbsCoLa.SimConTwo id holds subject date verbstatus object receiver -> failure x
  AbsCoLa.SimConThree id holds date subject verbstatus object receiver -> failure x
  AbsCoLa.SimConFour id holds subject modalverb verb object receiver date -> failure x
  AbsCoLa.SimConFive id holds booleanexpression -> failure x
  AbsCoLa.SimConOneNH id subject verbstatus object receiver date -> failure x
  AbsCoLa.SimConTwoNH id subject date verbstatus object receiver -> failure x
  AbsCoLa.SimConThreeNH id date subject verbstatus object receiver -> failure x
  AbsCoLa.SimConFourNH id subject modalverb verb object receiver date -> failure x
  AbsCoLa.SimConFiveNH id booleanexpression -> failure x

transBooleanExpression :: AbsCoLa.BooleanExpression -> Result
transBooleanExpression x = case x of
  AbsCoLa.BoolEx subject1 verbstatus comparison subject2 -> failure x

transID :: AbsCoLa.ID -> Result
transID x = case x of
  AbsCoLa.IDSim num -> failure x
  AbsCoLa.IDRep num1 num2 -> failure x

transHolds :: AbsCoLa.Holds -> Result
transHolds x = case x of
  AbsCoLa.HoldYes -> failure x
  AbsCoLa.HoldNo -> failure x

transSubject :: AbsCoLa.Subject -> Result
transSubject x = case x of
  AbsCoLa.SubQuoted string -> failure x
  AbsCoLa.SubUnQuoted ident -> failure x

transVerb :: AbsCoLa.Verb -> Result
transVerb x = case x of
  AbsCoLa.VDel -> failure x
  AbsCoLa.VPay -> failure x
  AbsCoLa.VCharge -> failure x
  AbsCoLa.VRefund -> failure x

transVerbStatus :: AbsCoLa.VerbStatus -> Result
transVerbStatus x = case x of
  AbsCoLa.VSDel -> failure x
  AbsCoLa.VSPay -> failure x
  AbsCoLa.VSCharge -> failure x
  AbsCoLa.VSRefund -> failure x

transComparison :: AbsCoLa.Comparison -> Result
transComparison x = case x of
  AbsCoLa.CompareLess -> failure x
  AbsCoLa.CompareEq equal -> failure x
  AbsCoLa.CompareMore more -> failure x

transEqual :: AbsCoLa.Equal -> Result
transEqual x = case x of
  AbsCoLa.EqOne -> failure x
  AbsCoLa.EqTwo -> failure x

transMore :: AbsCoLa.More -> Result
transMore x = case x of
  AbsCoLa.MoreOne -> failure x
  AbsCoLa.MoreTwo -> failure x

transModalVerb :: AbsCoLa.ModalVerb -> Result
transModalVerb x = case x of
  AbsCoLa.ModalObli obligation -> failure x
  AbsCoLa.ModalPermi -> failure x
  AbsCoLa.ModalForbi -> failure x

transObligation :: AbsCoLa.Obligation -> Result
transObligation x = case x of
  AbsCoLa.ObliOne -> failure x
  AbsCoLa.ObliTwo -> failure x

transDate :: AbsCoLa.Date -> Result
transDate x = case x of
  AbsCoLa.DateSpe num1 month num2 -> failure x
  AbsCoLa.DateAny -> failure x
  AbsCoLa.DateSome subject -> failure x
  AbsCoLa.DateThe subject -> failure x
  AbsCoLa.DateQuanSpecific temporalquantifier num1 month num2 -> failure x
  AbsCoLa.DateQuanThe temporalquantifier1 temporaloffset temporalquantifier2 subject -> failure x
  AbsCoLa.DateQuanSome temporalquantifier1 temporaloffset temporalquantifier2 subject -> failure x

transTemporalQuantifier :: AbsCoLa.TemporalQuantifier -> Result
transTemporalQuantifier x = case x of
  AbsCoLa.TempAfter -> failure x
  AbsCoLa.TempBefore -> failure x

transTemporalOffset :: AbsCoLa.TemporalOffset -> Result
transTemporalOffset x = case x of
  AbsCoLa.TempOffDay num -> failure x
  AbsCoLa.TempOffYear num -> failure x
  AbsCoLa.TempOffWeek num -> failure x

transMonth :: AbsCoLa.Month -> Result
transMonth x = case x of
  AbsCoLa.MJan -> failure x
  AbsCoLa.MFeb -> failure x
  AbsCoLa.MMar -> failure x
  AbsCoLa.MApr -> failure x
  AbsCoLa.MMay -> failure x
  AbsCoLa.MJun -> failure x
  AbsCoLa.MJul -> failure x
  AbsCoLa.MAug -> failure x
  AbsCoLa.MSep -> failure x
  AbsCoLa.MOct -> failure x
  AbsCoLa.MNov -> failure x
  AbsCoLa.MDec -> failure x

transObject :: AbsCoLa.Object -> Result
transObject x = case x of
  AbsCoLa.ObjNu numericalobject -> failure x
  AbsCoLa.ObjNonNu nonnumericalobject -> failure x

transNumericalObject :: AbsCoLa.NumericalObject -> Result
transNumericalObject x = case x of
  AbsCoLa.NumPound pounds num -> failure x
  AbsCoLa.NumDol dollars num -> failure x
  AbsCoLa.NumEur euros num -> failure x
  AbsCoLa.NumAmount subject -> failure x

transPounds :: AbsCoLa.Pounds -> Result
transPounds x = case x of
  AbsCoLa.PoundOne -> failure x
  AbsCoLa.PoundTwo -> failure x
  AbsCoLa.PoundThree -> failure x

transDollars :: AbsCoLa.Dollars -> Result
transDollars x = case x of
  AbsCoLa.DollarOne -> failure x
  AbsCoLa.DollarTwo -> failure x
  AbsCoLa.DollarThree -> failure x

transEuros :: AbsCoLa.Euros -> Result
transEuros x = case x of
  AbsCoLa.EuroOne -> failure x
  AbsCoLa.EuroTwo -> failure x

transNonNumericalObject :: AbsCoLa.NonNumericalObject -> Result
transNonNumericalObject x = case x of
  AbsCoLa.NonNumCurr subject -> failure x
  AbsCoLa.NonNumRep subject -> failure x
  AbsCoLa.NonNumNamed subject -> failure x
  AbsCoLa.NonNumOther subject -> failure x

transNum :: AbsCoLa.Num -> Result
transNum x = case x of
  AbsCoLa.NumInt integer -> failure x

transReceiver :: AbsCoLa.Receiver -> Result
transReceiver x = case x of
  AbsCoLa.Rec subject -> failure x
