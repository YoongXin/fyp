-- File generated by the BNF Converter (bnfc 2.9.5).

-- | Program to test parser.

module Main where

import Prelude
  ( ($), (.)
  , Either(..)
  , Int, (>)
  , String, (++), concat, unlines
  , Show, show
  , IO, (>>), (>>=), mapM_, putStrLn
  , FilePath
  , getContents, readFile
  )
import System.Environment ( getArgs )
import System.Exit        ( exitFailure )
import Control.Monad      ( when )

import AbsCola   
import LexCola   ( Token, mkPosToken )
import ParCola   ( pContract, myLexer )
import PrintCola ( Print, printTree )
import SkelCola  ()

import Data.List (intercalate)

-- Define a custom data type to represent FOL formulas
data Term 
    = Var String
    | Fun String [Term]
  deriving (Eq, Show, Read)

data Formula 
    = Pred String [Term]
    | Equal Term Term
    | Not Formula
    | And Formula Formula
    | Or Formula Formula
    | Implies Formula Formula
    | Exists String Formula
    | Forall String Formula
  deriving (Eq, Show, Read)

type Err        = Either String
type ParseFun a = [Token] -> Err a
type Verbosity  = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: (Print a, Show a) => Verbosity -> ParseFun a -> FilePath -> IO ()
runFile v p f = putStrLn f >> readFile f >>= run v p

run :: (Print a, Show a) => Verbosity -> ParseFun a -> String -> IO ()
run v p s =
  case p ts of
    Left err -> do
      putStrLn "\nParse              Failed...\n"
      putStrV v "Tokens:"
      mapM_ (putStrV v . showPosToken . mkPosToken) ts
      putStrLn err
      exitFailure
    Right tree -> do
      putStrLn "\nParse Successful!"
      showTree v tree
  where
  ts = myLexer s
  showPosToken ((l,c),t) = concat [ show l, ":", show c, "\t", show t ]

showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree = do
  putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
  putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]


-- Function to convert the AST to FOL formula
astToFOL :: Component -> FOLFormula
astToFOL (ComState (StateSim (SimStateOne (IDSim (NumInt _)) _ subject _ verb object receiver date))) =
    -- Construct the FOL formula
    ForAll "Bob" (Predicate "deliver" [show subject, show receiver, show object, show date])


-- Helper function to pretty print the FOL formula
showFOL :: FOLFormula -> String
showFOL (ForAll var formula) = "For all (" ++ var ++ "), " ++ showFOL formula
showFOL (Predicate name args) = name ++ "(" ++ intercalate ", " args ++ ")"
showFOL _ = ""  -- Implement for other cases

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    []         -> getContents >>= run 2 pContract
    "-s":fs    -> mapM_ (runFile 0 pContract) fs
    fs         -> mapM_ (runFile 2 pContract) fs

