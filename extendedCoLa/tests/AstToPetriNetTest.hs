module Test.AstToPetriNetTest where
    
import Test.QuickCheck
import qualified Main as CoLaParser
import ContractAnalysis.AstToPetriNet
import Parser.AbsCoLa 
import Helper.ExampleContracts

prop_convertToPetriNet :: String -> String -> Property
prop_convertToPetriNet input expectedPetriNet =
    printPNContract (contractToPN (CoLaParser.parseContract input)) === expectedPetriNet

emptyContractPN = "con = Contract()\n\ncon.interactiveSimulation()"
simpleDefinitionPN = "con = Contract()\n\ncon.definition(IsDefinition('\"PartyA\"', '\"Alice\"'))\ncon.interactiveSimulation()"
andDefinitionPN = "con = Contract()\n\ncon.definition([IsDefinition('\"PartyA\"', '\"Alice\"'),\n\t\tEqualsDefinition('\"AmountA\"', '\163\&100'),\n\t\tIsDefinition('\"DateA\"', '\"29 February 2024\"')])\ncon.interactiveSimulation()"
conditionalDefinitionPN = "con = Contract()\n\ncon.definition(ConditionalDefinition(condition=StatementCondition(statement=TemporalStatement('\"Kelly\"', 'SHALL', 'Charge', 'Amount \"\"rental\"\"', 'to \"Carol\"', TemporalExpression('BEFORE', '1 January 2024'), valid=True), test=True), definitions=IsDefinition('\"PartyA\"', '\"Carol\"'))\n)\ncon.interactiveSimulation()"
simpleStatementPN = "con = Contract()\n\ncon.statement(TemporalStatement('\"Eddie\"', 'SHANT', 'Charge', 'Amount \"\"extra\"\"', 'to \"Frank\"', TemporalExpression('On', 'ANYDATE'), valid=True))\ncon.interactiveSimulation()"
andStatementPN = "con = Contract()\n\ncon.statement(TemporalStatement('\"Dennis\"', 'SHANT', 'Charge', '\163\&20', 'to \"Katherine\"', TemporalExpression('On', 'ANYDATE'), valid=True))\ncon.statement(TemporalStatement('\"Matthew\"', 'SHALL', 'Deliver', 'OtherObject \"\"scarf\"\"', 'to \"Eric\"', TemporalExpression('ON', '4 August 2023'), valid=True))\ncon.interactiveSimulation()"
orStatementPN = "con = Contract()\n\ncon.statement(TemporalStatement('\"Alice\"', 'SHALL', 'Pay', '\163\&20', 'to \"Bob\"', TemporalExpression('ON', '9 September 2023'), valid=True))\ncon.statement(TemporalStatement('\"Alice\"', 'SHALL', 'Pay', '$30', 'to \"Bob\"', TemporalExpression('ON', '9 September 2023'), valid=True))\ncon.interactiveSimulation()"
conditionalStatementPN = "con = Contract()\n\ncon.statement(ConditionalStatement(condition=TemporalActionCondition('\"Helen\"', 'Paid', '\163\&12', 'to \"George\"', TemporalExpression('ON', 'THEDATE \"unknownOne\"'), test=True), statement=TemporalStatement('\"George\"', 'SHALL', 'Deliver', 'OtherObject \"\"charger\"\"', 'to \"Helen\"', TemporalExpression('AFTER', 'SOMEDATE \"unknownOne\"'), valid=True)))\ncon.statement(ConditionalStatement(condition=TemporalActionCondition('\"Helen\"', 'Paid', '\163\&12', 'to \"George\"', TemporalExpression('ON', 'THEDATE \"unknownOne\"'), test=False), statement=TemporalStatement('\"George\"', 'MAY', 'Charge', '\163\&2', 'to \"Helen\"', TemporalExpression('ON', 'SOMEDATE \"unknownTwo\"'), valid=True)))\ncon.interactiveSimulation()"
bikeDeliveryOriginalPN = "con = Contract()\n\ncon.statement(TemporalStatement('\"Bob\"', 'MAY', 'Deliver', 'Report \"\"receipt\"\"', 'to \"Alice\"', TemporalExpression('On', 'ANYDATE'), valid=True))\ncon.statement(TemporalStatement('\"Bob\"', 'SHANT', 'Charge', 'Amount \"\"delivery fee\"\"', 'to \"Alice\"', TemporalExpression('On', 'ANYDATE'), valid=True))\ncon.statement(ConditionalStatement(condition=OrCondition(conditions=[TemporalActionCondition('\"Alice\"', 'Paid', '\163\&100', 'to \"Bob\"', TemporalExpression('ON', '1 April 2021'), test=True),\n\t\tTemporalActionCondition('\"Alice\"', 'Paid', '$120', 'to \"Bob\"', TemporalExpression('ON', '1 April 2021'), test=True)]), statement=TemporalStatement('\"Bob\"', 'SHALL', 'Deliver', 'OtherObject \"\"bicycle\"\"', 'to \"Alice\"', TemporalExpression('ON', '5 April 2021'), valid=True)))\ncon.interactiveSimulation()"
bikeDeliveryModifiedPN = "con = Contract()\n\ncon.statement(ConditionalStatement(condition=OrCondition(conditions=[TemporalActionCondition('\"Alice\"', 'Paid', '\163\&100', 'to \"Bob\"', TemporalExpression('ON', '1 April 2021'), test=True),\n\t\tTemporalActionCondition('\"Alice\"', 'Paid', '$120', 'to \"Bob\"', TemporalExpression('ON', '1 April 2021'), test=True)]), statement=TemporalStatement('\"Bob\"', 'SHALL', 'Deliver', 'OtherObject \"\"bicycle\"\"', 'to \"Alice\"', TemporalExpression('ON', '5 April 2021'), valid=True)))\ncon.statement(ConditionalStatement(condition=OrCondition(conditions=[TemporalActionCondition('\"Alice\"', 'Paid', '\163\&100', 'to \"Bob\"', TemporalExpression('ON', '1 April 2021'), test=True),\n\t\tTemporalActionCondition('\"Alice\"', 'Paid', '$120', 'to \"Bob\"', TemporalExpression('ON', '1 April 2021'), test=True)]), statement=TemporalStatement('\"Bob\"', 'MAY', 'Deliver', 'Report \"\"receipt\"\"', 'to \"Alice\"', TemporalExpression('On', 'ANYDATE'), valid=True)))\ncon.statement(ConditionalStatement(condition=OrCondition(conditions=[TemporalActionCondition('\"Alice\"', 'Paid', '\163\&100', 'to \"Bob\"', TemporalExpression('ON', '1 April 2021'), test=True),\n\t\tTemporalActionCondition('\"Alice\"', 'Paid', '$120', 'to \"Bob\"', TemporalExpression('ON', '1 April 2021'), test=True)]), statement=TemporalStatement('\"Bob\"', 'SHANT', 'Charge', 'Amount \"\"delivery fee\"\"', 'to \"Alice\"', TemporalExpression('On', 'ANYDATE'), valid=True)))\ncon.interactiveSimulation()"
bikeDeliverySanctionPN = "con = Contract()\n\ncon.statement(ConditionalStatement(condition=OrCondition(conditions=[TemporalActionCondition('\"Alice\"', 'Paid', '\163\&100', 'to \"Bob\"', TemporalExpression('ON', '1 April 2021'), test=True),\n\t\tTemporalActionCondition('\"Alice\"', 'Paid', '$120', 'to \"Bob\"', TemporalExpression('ON', '1 April 2021'), test=True)]), statement=TemporalStatement('\"Bob\"', 'SHALL', 'Deliver', 'OtherObject \"\"bicycle\"\"', 'to \"Alice\"', TemporalExpression('ON', '5 April 2021'), valid=True)))\ncon.statement(ConditionalStatement(condition=OrCondition(conditions=[TemporalActionCondition('\"Alice\"', 'Paid', '\163\&100', 'to \"Bob\"', TemporalExpression('ON', '1 April 2021'), test=True),\n\t\tTemporalActionCondition('\"Alice\"', 'Paid', '$120', 'to \"Bob\"', TemporalExpression('ON', '1 April 2021'), test=True)]), statement=TemporalStatement('\"Bob\"', 'SHANT', 'Charge', 'Amount \"\"delivery fee\"\"', 'to \"Alice\"', TemporalExpression('On', 'ANYDATE'), valid=True)))\ncon.statement(ConditionalStatement(condition=AndCondition(conditions=[TemporalActionCondition('\"Bob\"', 'Delivered', 'OtherObject \"\"bicycle\"\"', 'to \"Alice\"', TemporalExpression('ON', '5 April 2021'), test=True),\n\t\tTemporalActionCondition('\"Bob\"', 'Charged', 'Amount \"\"delivery fee\"\"', 'to \"Alice\"', TemporalExpression('On', 'ANYDATE'), test=False)]), statement=TemporalStatement('\"Bob\"', 'MAY', 'Deliver', 'Report \"\"receipt\"\"', 'to \"Alice\"', TemporalExpression('On', 'ANYDATE'), valid=True)))\ncon.statement(ConditionalStatement(condition=TemporalActionCondition('\"Bob\"', 'Delivered', 'OtherObject \"\"bicycle\"\"', 'to \"Alice\"', TemporalExpression('ON', '5 April 2021'), test=False), statement=TemporalStatement('\"Alice\"', 'MAY', 'Charge', '\163\&100', 'to \"Bob\"', TemporalExpression('ON', '8 April 2021'), valid=True)))\ncon.interactiveSimulation()"
isdaOriginalPN = "con = Contract()\n\ncon.statement(TemporalStatement('\"ExcessParty\"', 'SHALL', 'Pay', 'Amount \"\"ExcessAmount\"\"', 'to \"AnotherParty\"', TemporalExpression('ON', 'THEDATE \"unknownOne\"'), valid=True))\ncon.statement(ConditionalStatement(condition=AndCondition(conditions=[StatementCondition(statement=TemporalStatement('\"PartyA\"', 'SHALL', 'Pay', 'Amount \"\"AmountA\"\"', 'to \"PartyB\"', TemporalExpression('ON', 'SOMEDATE \"unknownOne\"'), valid=True), test=True),\n\t\tStatementCondition(statement=TemporalStatement('\"PartyB\"', 'SHALL', 'Pay', 'Amount \"\"AmountB\"\"', 'to \"PartyA\"', TemporalExpression('ON', 'THEDATE \"unknownOne\"'), valid=True), test=True)]), statement=TemporalStatement('\"PartyA\"', 'SHALL', 'Pay', 'Amount \"\"AmountA\"\"', 'to \"PartyB\"', TemporalExpression('ON', 'THEDATE \"unknownOne\"'), valid=False)))\ncon.statement(ConditionalStatement(condition=AndCondition(conditions=[StatementCondition(statement=TemporalStatement('\"PartyA\"', 'SHALL', 'Pay', 'Amount \"\"AmountA\"\"', 'to \"PartyB\"', TemporalExpression('ON', 'SOMEDATE \"unknownOne\"'), valid=True), test=True),\n\t\tStatementCondition(statement=TemporalStatement('\"PartyB\"', 'SHALL', 'Pay', 'Amount \"\"AmountB\"\"', 'to \"PartyA\"', TemporalExpression('ON', 'THEDATE \"unknownOne\"'), valid=True), test=True)]), statement=TemporalStatement('\"PartyB\"', 'SHALL', 'Pay', 'Amount \"\"AmountB\"\"', 'to \"PartyA\"', TemporalExpression('ON', 'THEDATE \"unknownOne\"'), valid=False)))\ncon.definition(ConditionalDefinition(condition=ExpressionCondition(BooleanExpression('\"PartyA\"', 'Paid', 'MoreThan', '\"PartyB\"'), test=True), definitions=[IsDefinition('\"ExcessParty\"', '\"PartyA\"'),\n\t\tEqualsDefinition('\"ExcessAmount\"', 'AmountA - AmountB')])\n)\ncon.definition(ConditionalDefinition(condition=ExpressionCondition(BooleanExpression('\"PartyB\"', 'Paid', 'MoreThan', '\"PartyA\"'), test=True), definitions=[IsDefinition('\"ExcessParty\"', '\"PartyB\"'),\n\t\tEqualsDefinition('\"ExcessAmount\"', 'AmountB - AmountA')])\n)\ncon.interactiveSimulation()"
isdaModifiedPN = "con = Contract()\n\ncon.statement(ConditionalStatement(condition=AndCondition(conditions=[StatementCondition(statement=TemporalStatement('\"PartyA\"', 'SHALL', 'Pay', 'Amount \"\"AmountA\"\"', 'to \"PartyB\"', TemporalExpression('ON', '1 January 1970'), valid=True), test=True),\n\t\tStatementCondition(statement=TemporalStatement('\"PartyB\"', 'SHALL', 'Pay', 'Amount \"\"AmountB\"\"', 'to \"PartyA\"', TemporalExpression('ON', '1 January 1970'), valid=True), test=True)]), statement=TemporalStatement('\"PartyA\"', 'SHALL', 'Pay', 'Amount \"\"AmountA\"\"', 'to \"PartyB\"', TemporalExpression('ON', '1 January 1970'), valid=False)))\ncon.statement(ConditionalStatement(condition=AndCondition(conditions=[StatementCondition(statement=TemporalStatement('\"PartyA\"', 'SHALL', 'Pay', 'Amount \"\"AmountA\"\"', 'to \"PartyB\"', TemporalExpression('ON', '1 January 1970'), valid=True), test=True),\n\t\tStatementCondition(statement=TemporalStatement('\"PartyB\"', 'SHALL', 'Pay', 'Amount \"\"AmountB\"\"', 'to \"PartyA\"', TemporalExpression('ON', '1 January 1970'), valid=True), test=True)]), statement=TemporalStatement('\"PartyB\"', 'SHALL', 'Pay', 'Amount \"\"AmountB\"\"', 'to \"PartyA\"', TemporalExpression('ON', '1 January 1970'), valid=False)))\ncon.statement(ConditionalStatement(condition=AndCondition(conditions=[StatementCondition(statement=TemporalStatement('\"PartyA\"', 'SHALL', 'Pay', 'Amount \"\"AmountA\"\"', 'to \"PartyB\"', TemporalExpression('ON', '1 January 1970'), valid=True), test=True),\n\t\tStatementCondition(statement=TemporalStatement('\"PartyB\"', 'SHALL', 'Pay', 'Amount \"\"AmountB\"\"', 'to \"PartyA\"', TemporalExpression('ON', '1 January 1970'), valid=True), test=True)]), statement=TemporalStatement('\"Excessparty\"', 'SHALL', 'Pay', 'Amount \"\"ExcessAmount\"\"', 'to \"AnotherParty\"', TemporalExpression('ON', 'THEDATE \"unknownOne\"'), valid=True)))\ncon.definition(ConditionalDefinition(condition=ExpressionCondition(BooleanExpression('\"PartyA\"', 'Paid', 'MoreThan', '\"PartyB\"'), test=True), definitions=[IsDefinition('\"ExcessParty\"', '\"PartyA\"'),\n\t\tEqualsDefinition('\"ExcessAmount\"', 'AmountA - AmountB')])\n)\ncon.definition(ConditionalDefinition(condition=ExpressionCondition(BooleanExpression('\"PartyB\"', 'Paid', 'MoreThan', '\"PartyA\"'), test=True), definitions=[IsDefinition('\"ExcessParty\"', '\"PartyA\"'),\n\t\tEqualsDefinition('\"ExcessAmount\"', 'AmountB - AmountA')])\n)\ncon.interactiveSimulation()"
guarantorPN = "con = Contract()\n\ncon.statement(TemporalStatement('\"Landlord\"', 'SHALL', 'Deliver', 'OtherObject \"\"property\"\"', 'to \"Tenant\"', TemporalExpression('ON', '2 April 2023'), valid=True))\ncon.statement(ConditionalStatement(condition=AndCondition(conditions=[TemporalActionCondition('\"Landlord\"', 'Delivered', 'OtherObject \"\"demandOfTenantPayment\"\"', 'to \"Tenant\"', TemporalExpression('ON', '2 April 2023'), test=True),\n\t\tTemporalActionCondition('\"Tenant\"', 'Paid', 'Amount \"\"AmountA\"\"', 'to \"Landlord\"', TemporalExpression('BEFORE', '5 April 2023'), test=False)]), statement=TemporalStatement('\"Landlord\"', 'MAY', 'Deliver', 'OtherObject \"\"demandOfGuarantorPayment\"\"', 'to \"Tenant\"', TemporalExpression('ON', '6 April 2023'), valid=True)))\ncon.statement(ConditionalStatement(condition=AndCondition(conditions=[TemporalActionCondition('\"Landlord\"', 'Delivered', 'OtherObject \"\"demandOfTenantPayment\"\"', 'to \"Tenant\"', TemporalExpression('ON', '2 April 2023'), test=True),\n\t\tTemporalActionCondition('\"Tenant\"', 'Paid', 'Amount \"\"AmountA\"\"', 'to \"Landlord\"', TemporalExpression('BEFORE', '10 April 2023'), test=False),\n\t\tTemporalActionCondition('\"Landlord\"', 'Delivered', 'OtherObject \"\"demandOfGuarantorPayment\"\"', 'to \"Tenant\"', TemporalExpression('ON', '6 April 2023'), test=True)]), statement=TemporalStatement('\"Guarantor\"', 'SHALL', 'Pay', 'Amount \"\"AmountA\"\"', 'to \"Landlord\"', TemporalExpression('ON', '11 April 2023'), valid=True)))\ncon.statement(ConditionalStatement(condition=TemporalActionCondition('\"Tenant\"', 'Paid', 'Amount \"\"AmountB\"\"', 'to \"Landlord\"', TemporalExpression('BEFORE', '11 September 2023'), test=False), statement=TemporalStatement('\"Guarantor\"', 'SHALL', 'Pay', 'Amount \"\"AmountB\"\"', 'to \"Landlord\"', TemporalExpression('ON', '12 September 2023'), valid=True)))\ncon.statement(ConditionalStatement(condition=AndCondition(conditions=[TemporalActionCondition('\"HousingBenefitScheme\"', 'Paid', 'Amount \"\"AmountC\"\"', 'to \"Tenant\"', TemporalExpression('ON', '1 January 2024'), test=True),\n\t\tTemporalActionCondition('\"LocalAuthority\"', 'Delivered', 'OtherObject \"\"overpaymentClaim\"\"', 'to \"Tenant\"', TemporalExpression('ON', '7 January 2024'), test=True)]), statement=TemporalStatement('\"Guarantor\"', 'SHALL', 'Pay', 'Amount \"\"AmountC\"\"', 'to \"Landlord\"', TemporalExpression('BEFORE', '10 January 2024'), valid=True)))\ncon.interactiveSimulation()"
employmentPN = "con = Contract()\n\ncon.statement(TemporalStatement('\"Employee\"', 'MAY', 'Deliver', 'OtherObject \"\"presentationsOnBehalfOfEmployer\"\"', 'to \"Client\"', TemporalExpression('On', 'ANYDATE'), valid=True))\ncon.statement(TemporalStatement('\"Employee\"', 'SHANT', 'Charge', 'Amount \"\"unauthorisedExpenses\"\"', 'to \"Employer\"', TemporalExpression('On', 'ANYDATE'), valid=True))\ncon.statement(TemporalStatement('\"Employee\"', 'MAY', 'Charge', 'Amount \"\"serviceChargeOnBehalfOfEmployer\"\"', 'to \"Client\"', TemporalExpression('On', 'ANYDATE'), valid=True))\ncon.statement(ConditionalStatement(condition=TemporalActionCondition('\"Employee\"', 'Delivered', 'OtherObject \"\"responsibilities\"\"', 'to \"Employer\"', TemporalExpression('BEFORE', '25 March 2024'), test=True), statement=TemporalStatement('\"Employer\"', 'SHALL', 'Pay', '\163\&2500', 'to \"Employee\"', TemporalExpression('ON', '25 March 2024'), valid=True)))\ncon.statement(ConditionalStatement(condition=TemporalActionCondition('\"Employee\"', 'Delivered', 'OtherObject \"\"absenceWithoutPriorNotice\"\"', 'to \"Employer\"', TemporalExpression('ON', 'SOMEDATE \"unknownOne\"'), test=True), statement=TemporalStatement('\"Employee\"', 'SHALL', 'Deliver', 'Report \"\"absenceReason\"\"', 'to \"Employer\"', TemporalExpression('BEFORE', 'NumInt 3 days AFTER THEDATE \"unknownOne\"'), valid=True)))\ncon.statement(ConditionalStatement(condition=TemporalActionCondition('\"Employee\"', 'Delivered', 'OtherObject \"\"absenceWithoutPriorNotice\"\"', 'to \"Employer\"', TemporalExpression('ON', 'SOMEDATE \"unknownOne\"'), test=True), statement=TemporalStatement('\"Employer\"', 'MAY', 'Charge', '\163\&100', 'to \"Employee\"', TemporalExpression('ON', 'NumInt 4 weeks AFTER THEDATE \"unknownOne\"'), valid=True)))\ncon.statement(ConditionalStatement(condition=TemporalActionCondition('\"Employee\"', 'Delivered', 'Report \"\"requestForReimbursement\"\"', 'to \"Employer\"', TemporalExpression('ON', 'THEDATE \"unknownTwo\"'), test=True), statement=TemporalStatement('\"Employee\"', 'SHALL', 'Deliver', 'Report \"\"approvalRequest\"\"', 'to \"Employer\"', TemporalExpression('BEFORE', 'NumInt 2 weeks AFTER SOMEDATE \"unknownTwo\"'), valid=True)))\ncon.statement(ConditionalStatement(condition=TemporalActionCondition('\"Employee\"', 'Delivered', 'OtherObject \"\"extraHoursOfWork\"\"', 'to \"Employer\"', TemporalExpression('ON', 'SOMEDATE \"unknownThree\"'), test=True), statement=TemporalStatement('\"Employer\"', 'SHALL', 'Pay', 'Amount \"\"overtimePayment\"\"', 'to \"Employee\"', TemporalExpression('BEFORE', 'NumInt 4 weeks AFTER THEDATE \"unknownThree\"'), valid=True)))\ncon.statement(ConditionalStatement(condition=TemporalActionCondition('\"Employee\"', 'Delivered', 'OtherObject \"\"targetOutperformance\"\"', 'to \"Employer\"', TemporalExpression('ON', 'SOMEDATE \"unknownFour\"'), test=True), statement=TemporalStatement('\"Employer\"', 'SHALL', 'Pay', 'Amount \"\"bonus\"\"', 'to \"Employee\"', TemporalExpression('ON', 'NumInt 1 year AFTER SOMEDATE \"unknownFour\"'), valid=True)))\ncon.interactiveSimulation()"
tenancyPN = "con = Contract()\n\ncon.statement(TemporalStatement('\"Landlord\"', 'MAY', 'Charge', 'Amount \"\"securityDeposit\"\"', 'to \"Tenant\"', TemporalExpression('ON', '23 August 2023'), valid=True))\ncon.statement(TemporalStatement('\"Tenant\"', 'MAY', 'Deliver', 'OtherObject \"\"requestForRepair\"\"', 'to \"Landlord\"', TemporalExpression('On', 'ANYDATE'), valid=True))\ncon.statement(TemporalStatement('\"Tenant\"', 'SHANT', 'Deliver', 'OtherObject \"\"subletOfProperty\"\"', 'to \"Others\"', TemporalExpression('On', 'ANYDATE'), valid=True))\ncon.statement(ConditionalStatement(condition=TemporalActionCondition('\"Tenant\"', 'Paid', '\163\&15000', 'to \"Landlord\"', TemporalExpression('BEFORE', '1 September 2023'), test=True), statement=TemporalStatement('\"Landlord\"', 'SHALL', 'Deliver', 'OtherObject \"\"property\"\"', 'to \"Tenant\"', TemporalExpression('ON', '23 September 2023'), valid=True)))\ncon.statement(ConditionalStatement(condition=AndCondition(conditions=[TemporalActionCondition('\"Tenant\"', 'Delivered', 'OtherObject \"\"notDamagedProperty\"\"', 'to \"Landlord\"', TemporalExpression('ON', '22 September 2024'), test=True),\n\t\tTemporalActionCondition('\"Landlord\"', 'Charged', 'Amount \"\"securityDeposit\"\"', 'to \"Tenant\"', TemporalExpression('ON', '23 August 2023'), test=True)]), statement=TemporalStatement('\"Landlord\"', 'SHALL', 'Refund', 'Amount \"\"securityDeposit\"\"', 'to \"Tenant\"', TemporalExpression('BEFORE', '1 October 2024'), valid=True)))\ncon.statement(ConditionalStatement(condition=TemporalActionCondition('\"Landlord\"', 'Charged', 'Amount \"\"incrementInRental\"\"', 'to \"Tenant\"', TemporalExpression('ON', 'SOMEDATE \"unknown\"'), test=True), statement=TemporalStatement('\"Landlord\"', 'SHALL', 'Deliver', 'Report \"\"noticeOfRentalIncrement\"\"', 'to \"Tenant\"', TemporalExpression('ON', 'NumInt 4 weeks BEFORE THEDATE \"unknown\"'), valid=True)))\ncon.interactiveSimulation()"
serviceLevelAgreementPN = "con = Contract()\n\ncon.statement(TemporalStatement('\"ServiceProvider\"', 'SHALL', 'Deliver', 'OtherObject \"\"agreedService\"\"', 'to \"Client\"', TemporalExpression('ON', '10 February 2024'), valid=True))\ncon.statement(TemporalStatement('\"Client\"', 'SHALL', 'Pay', '\163\&100', 'to \"ServiceProvider\"', TemporalExpression('BEFORE', '10 March 2024'), valid=True))\ncon.statement(TemporalStatement('\"Client\"', 'MAY', 'Deliver', 'Report \"\"requestForRefund\"\"', 'to \"ServiceProvider\"', TemporalExpression('BEFORE', '13 February 2024'), valid=True))\ncon.statement(ConditionalStatement(condition=TemporalActionCondition('\"ServiceProvider\"', 'Delivered', 'OtherObject \"\"agreedService\"\"', 'to \"Client\"', TemporalExpression('AFTER', '10 February 2024'), test=True), statement=TemporalStatement('\"ServiceProvider\"', 'SHALL', 'Refund', '\163\&10', 'to \"Client\"', TemporalExpression('BEFORE', '17 February 2024'), valid=True)))\ncon.statement(ConditionalStatement(condition=TemporalActionCondition('\"Client\"', 'Paid', '\163\&100', 'to \"ServiceProvider\"', TemporalExpression('BEFORE', '10 April 2024'), test=False), statement=TemporalStatement('\"ServiceProvider\"', 'MAY', 'Deliver', 'Report \"\"terminationOfAgreement\"\"', 'to \"Client\"', TemporalExpression('AFTER', '10 April 2024'), valid=True)))\ncon.interactiveSimulation()"

petriNetSampleTests :: [(String, String)]
petriNetSampleTests = 
    [(emptyContract, emptyContractPN)
    , (simpleDefinition1, simpleDefinitionPN)
    , (andDefinition4, andDefinitionPN)
    , (conditionalDefinition8, conditionalDefinitionPN)
    , (simpleStatement3, simpleStatementPN)
    , (andStatement3, andStatementPN)
    , (orStatement1, orStatementPN)
    , (conditionalStatement8, conditionalStatementPN)
    , (bikeDeliveryOriginal, bikeDeliveryOriginalPN)
    , (bikeDeliveryModified, bikeDeliveryModifiedPN)
    , (bikeDeliverySanction, bikeDeliverySanctionPN)
    , (isdaOriginal, isdaOriginalPN)
    , (isdaModified, isdaModifiedPN)
    , (guarantor, guarantorPN)
    , (employment, employmentPN)
    , (tenancy, tenancyPN)
    , (serviceLevelAgreement, serviceLevelAgreementPN)]

petriNetConversionTest :: IO ()
petriNetConversionTest = do
    putStrLn "Running QuickCheck tests for AST to Petri Net converter ..."
    quickCheck $ forAll (elements petriNetSampleTests) (\(input, expected) -> prop_convertToPetriNet input expected)
    putStrLn "Done."